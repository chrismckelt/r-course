source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
dt.search.result$predicted_word <- dt.search.result$word
dt.search.result$predicted_word <- dt.search.result$word
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
search <- "is one of the" search <- clean.text(search) result <- predictor(search) result
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
search <- "is one of the" search <- clean.text(search) result <- predictor(search) result #f <- predict.word(search,result)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
search <- "is one of the" search <- clean.text(search) result <- predictor(search) result #f <- predict.word(search,result)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
search <- "is one of the" search <- clean.text(search) result <- predictor(search) result #f <- predict.word(search,result)
for (a in 1:length(dt.search.result$predicted_word)) {         for (b in 1:length(dt.search.terms)) {
print(dt.search.terms[b])
dt.search.result$predicted_word[a] = gsub(dt.search.terms$V1[b],"",(dt.search.result$predicted_word[a]))
}     }
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
st <- as.data.table(str_split(search, " "), stringsAsFactors = FALSE)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
st <- as.data.table(str_split(search, " "), stringsAsFactors = FALSE) for (a in 1:length(st)) {     for (b in 1:length(st)) {         print(st[b])         result[a, 4] = gsub(st$V1[b], "", (result[a, 4]))     } }
result
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
search <- "is one of the" search <- clean.text(search) result <- predictor(search)
st <- as.data.table(str_split(search, " "), stringsAsFactors = FALSE) for (a in 1:length(st)) {     for (b in 1:length(st)) {         print(st[b])         result[a, 4] = gsub(st$V1[b], "", (result[a, 4]))     } }
result
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
search <- "is one of the" search <- clean.text(search) result <- predictor(search) result
result
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
st <- as.data.table(str_split(search, " "), stringsAsFactors = FALSE) for (a in 1:length(result$predicted)) {     for (b in 1:length(st)) {         print(st[b])         result[a, 4] = gsub(st$V1[b], "", (result[a, 4]))     } }
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
search <- "is one of the" search <- clean.text(search) result <- predictor(search)
st <- as.data.table(str_split(search, " "), stringsAsFactors = FALSE)
for (a in 1:length(result$predicted)) {     for (b in 1:length(st)) {         result$predicted[a] = str_replace_all(result$predicted[a], st$V1[b],"")     } }
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
search <- "is one of the" search <- clean.text(search) result <- predictor(search)
st <- as.data.table(str_split(search, " "), stringsAsFactors = FALSE) for (a in 1:length(result$predicted)) {     for (b in 1:length(st)) {         result$predicted[a] = str_replace_all(result$predicted[a], st$V1[b],"")     } }
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
search <- "is one of the" search <- clean.text(search) result <- predictor(search)
dt.search.terms = as.data.table(str_split(sentence, " "), stringsAsFactors = FALSE)
dt.search.terms = as.data.table(str_split(search, " "), stringsAsFactors = FALSE)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
search <- "is one of the" search <- clean.text(search) dt.search.terms = as.data.table(str_split(search, " "), stringsAsFactors = FALSE) result <- predictor(search)
result$predicted <- lapply(result$predicted, function(x) {     x <- lapply(dt.search.terms, function(y) str_replace_all(x, y, '-')) })
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
search <- "is one of the" search <- clean.text(search) dt.search.terms = as.data.table(str_split(search, " "), stringsAsFactors = FALSE) result <- predictor(search)
result$predicted <- lapply(result$predicted, function(x) {    lapply(dt.search.terms, function(y) l(x, y, ' ')) })
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
foreach(i = 1:nrow(result$predicted), .combine = rbind) %dopar%
result$predicted[i,] <- "hi"
foreach(i = 1:nrow(result), .combine = rbind) %dopar%
result$predicted[i,] <- "hi"
foreach(i = 1:nrow(result), .combine = rbind) %dopar%
print(1)
result$predicted <- lapply(result$predicted, function(x) {     # lapply(na.omit(dt.search.terms), function(y) str_replace_all(x, y, ' '))     print(x) })
result$predicted <- lapply(result$predicted, function(x) {     # lapply(na.omit(dt.search.terms), function(y) str_replace_all(x, y, ' '))     for (i in 1:nrow(dt.search.terms)) {         x <- str_replace_all(x, dt.search.terms[i], "x")        next     } })
result$predicted <- lapply(result$predicted, function(x) {     # lapply(na.omit(dt.search.terms), function(y) str_replace_all(x, y, ' '))     for (i in 1:nrow(dt.search.terms)) {         x <- str_replace_all(x, dt.search.terms[i], "x")         x     } })
search <- "is one of the" search <- clean.text(search) dt.search.terms = as.data.table(str_split(search, " "), stringsAsFactors = FALSE) result <- predictor(search)
result$predicted <- lapply(result$predicted, function(x) {     # lapply(na.omit(dt.search.terms), function(y) str_replace_all(x, y, ' '))     for (i in 1:nrow(dt.search.terms)) {         x <- str_replace_all(x, dt.search.terms[i], "x")         x     } })
search <- "is one of the" search <- clean.text(search) dt.search.terms = as.data.table(str_split(search, " "), stringsAsFactors = FALSE) result <- predictor(search)
result$predicted <- lapply(result$predicted, function(x) {     # lapply(na.omit(dt.search.terms), function(y) str_replace_all(x, y, ' '))     for (i in 1:nrow(dt.search.terms)) {         x <- gsub(dt.search.terms[i], "",x, perl = TRUE)         x            } })
search <- "is one of the" search <- clean.text(search) dt.search.terms = as.data.table(str_split(search, " "), stringsAsFactors = FALSE) result <- predictor(search)
result$predicted <- lapply(result$predicted, function(x) {     # lapply(na.omit(dt.search.terms), function(y) str_replace_all(x, y, ' '))     for (i in 1:nrow(dt.search.terms)) {         x <- gsub(dt.search.terms[i], "",x, perl = TRUE)         print(x)     } })
for (r in 1:nrow(result$predicted)) {     for (i in 1:nrow(dt.search.terms)) {         x <- gsub(dt.search.terms[i], "", x, perl = TRUE)         result$predicted[r] <- x     } }
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
search <- "is one of the" search <- clean.text(search) dt.search.terms = as.data.table(str_split(search, " "), stringsAsFactors = FALSE) result <- predictor(search)
for (r in 1:nrow(result$predicted)) {     for (i in 1:nrow(dt.search.terms)) {         x <- gsub(dt.search.terms[i], "", x, perl = TRUE)         result$predicted[r] <- x     } }
search <- "is one of the" search <- clean.text(search) dt.search.terms = as.data.table(str_split(search, " "), stringsAsFactors = FALSE) result <- predictor(search)
for (r in 1:nrow(result$predicted)) {     for (i in 1:nrow(dt.search.terms)) {         x <- gsub(dt.search.terms[i], "", x, perl = TRUE)         print(x)         result$predicted[r] <- x     } }
search <- "is one of the" search <- clean.text(search) dt.search.terms = as.data.table(str_split(search, " "), stringsAsFactors = FALSE) result <- predictor(search)
for (r in 1:length(result$predicted)) {     for (i in 1:nrow(dt.search.terms)) {         x <- gsub(dt.search.terms[i], "", x, perl = TRUE)         print(x)         result$predicted[r] <- x     } }
search <- "is one of the" search <- clean.text(search) dt.search.terms = as.data.table(str_split(search, " "), stringsAsFactors = FALSE) result <- predictor(search)
for (r in 1:length(result$predicted)) {     for (i in 1:nrow(dt.search.terms)) {         x <- gsub(dt.search.terms[i], "", result$predicted[r], perl = TRUE)         print(x)         result$predicted[r] <- x     } }
result$predicted <- substr(result$predicted, (nchar(result$predicted) + 1) - n, nchar(result$predicted))
for (i in 1:length(result$predicted)) {     tmp <- as.data.table(str_split(result$predicted, " "), stringsAsFactors = FALSE)     last <- tmp[length(tmp)-1]     result$predicted[i] <- stringi::stri_sub(result$predicted[i],,) }
str_get_last_word <- function(str) {     tmp <- as.data.table(str_split(str, " "), stringsAsFactors = FALSE)     last <- tmp[length(tmp) - 1]     str <- stringi::stri_sub(str,,) }
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
str_get_last_word("asd dadaee dadkjlj-asdf dd")
ff <- str_get_last_word("asd dadaee dadkjlj-asdf dd")
ff
str_get_last_word <- function(str) {     tmp <- as.data.table(str_split(str, " "), stringsAsFactors = FALSE)     last <- tmp[length(tmp) - 1]     last }
ff <- str_get_last_word("asd dadaee dadkjlj-asdf dd") ff
ff <- str_get_last_word("asd dadaee dadkjlj-asdf dd")
ff
str_get_last_word <- function(str) {     tmp <- as.data.table(str_split(str, " "), stringsAsFactors = FALSE)     last <- tmp[length(tmp) - 1]     tail(last, n = 1) }
ff <- str_get_last_word("asd dadaee dadkjlj-asdf dd")
ff
print(last)
str_get_last_word <- function(str) {     tmp <- as.data.table(str_split(str, " "), stringsAsFactors = FALSE)     last <- tmp[length(tmp) - 1]     print(last)     tail(last, n = 1) }
ff <- str_get_last_word("asd dadaee dadkjlj-asdf dd")
ff
str_get_last_word <- function(str) {     tmp <- str_split(str, " ")     rev(tmp)[1] }
ff <- str_get_last_word("asd dadaee dadkjlj-asdf dd")
ff
str_get_last_word <- function(str) {     tmp <- str_split(str, " ")     tmp[length(tmp)] }
ff <- str_get_last_word("asd dadaee dadkjlj-asdf dd") ff
str_get_last_word <- function(str) {     tmp <- str_split(str, " ")     tmp[length(tmp)][1] }
ff <- str_get_last_word("asd dadaee dadkjlj-asdf dd")
ff
str_get_last_word <- function(str) {     tmp <- str_split(str, " ")     tmp[length(tmp)][[1]] }
ff <- str_get_last_word("asd dadaee dadkjlj-asdf dd") ff
str_get_last_word <- function(str) {     tmp <- str_split(str, " ")     dplyr::last(tmp) }
ff <- str_get_last_word("asd dadaee dadkjlj-asdf dd")
ff
str_get_last_word <- function(str) {     tmp <- str_split(str, " ")     print(tmp) }
ff <- str_get_last_word("asd dadaee dadkjlj-asdf dd")
ff
print(last(tmp))
rm(tmp)
str_get_last_word <- function(str) {     tmp <- str_split(str, " ")     print(last(tmp)) }
ff <- str_get_last_word("asd dadaee dadkjlj-asdf dd")
ff
tail(tmp,n=1)
str_get_last_word <- function(str) {     tmp <- str_split(str, " ")     tail(tmp,n=1) }
ff <- str_get_last_word("asd dadaee dadkjlj-asdf dd")
ff
str <- ("asd dadaee dadkjlj-asdf dd") tmp <- str_split(str, " ") tail(tmp, n = 1) ff
str <- ("asd dadaee dadkjlj-asdf dd") tmp <- str_split(str, " ") tmp[1]
as.character(tmp[1])
str <- ("asd dadaee dadkjlj-asdf dd") tail(strsplit(str, split = " ")[[1]], 1)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
for (i in 1:length(result$predicted)) {     result$predicted[i] <- str_get_last_word(result$predicted[i]) }
result$predicted[1] <- str_get_last_word(result$predicted[1])
result$predicted[2] <- str_get_last_word(result$predicted[2])
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
search <- "is one of the" search <- clean.text(search) dt.search.terms = as.data.table(str_split(search, " "), stringsAsFactors = FALSE) result <- predictor(search)
for (i in 1:length(result$predicted)) {     result$predicted[2] <- str_get_last_word(result$predicted[2]) }
for (i in 1:length(result$predicted)) {     result$predicted[i] <- str_get_last_word(result$predicted[i]) }
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
search <- "is one of the" search <- clean.text(search) dt.search.terms = as.data.table(str_split(search, " "), stringsAsFactors = FALSE) result <- predictor(search)
search <- "When you breathe, I want to be the air for you. I'll be there for you, I'd live and I'd" search <- clean.text(search) dt.search.terms = as.data.table(str_split(search, " "), stringsAsFactors = FALSE) result <- predictor(search)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
for (i in 1:length(dt.search.result$predicted)) {         dt.search.result$predicted[i] <- str_get_last_word(dt.search.result$predicted[i])     }
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predict.word <- function(dt.result) {     for (i in 1:length(dt.result[5])) {         dt.result[5][i] <- str_get_last_word(as.character(dt.result[5][i]))     }     dt.result }
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
search <- "a few" search <- clean.text(search) dt.search.terms = as.data.table(str_split(search, " "), stringsAsFactors = FALSE) result <- predictor(search) #result <- predict.word(result)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
sapply(dt.search.result$prediction, function(x) str_get_last_word(x))
sapply(dt.search.result, function(x) str_get_last_word(x$prediction))
sapply(dt.search.result, function(x) str_get_last_word(x[5]))
dt.search.result <- sapply(dt.search.result, function(x) str_get_last_word(x[5]))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
for (i in 1:length(dt.search.result[5,])) {         dt.search.result[5,i] <- str_get_last_word(as.character(dt.search.result[5,i]))         #print(dt.search.result$predicted[i])     }
for (i in 1:length(dt.search.result)) {         dt.search.result[5,i] <- str_get_last_word(as.character(dt.search.result[5,i]))         #print(dt.search.result$predicted[i])     }
for (i in 1:nrow(dt.search.result)) {         dt.search.result[5,i] <- str_get_last_word(as.character(dt.search.result[5,i]))         #print(dt.search.result$predicted[i])     }
for (i in 1:length(dt.search.result$prediction)) {         dt.search.result[5,i] <- str_get_last_word(as.character(dt.search.result[5,i]))         #print(dt.search.result$predicted[i])     }
for (i in 1:length(dt.search.result)) {         dt.search.result[5,i] <- str_get_last_word(as.character(dt.search.result[5,i]))         #print(dt.search.result$predicted[i])     }
for (i in 1:length(dt.search.result)) {         dt.search.result[[5,i]] <- str_get_last_word(as.character(dt.search.result[[5,i]]))         #print(dt.search.result$predicted[i])     }
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
for (i in 1:length(dt.search.result)) {         dt.search.result[[5]][i]] <- str_get_last_word(as.character(dt.search.result[[5]][i]]))         #print(dt.search.result$predicted[i])     }          for (i in 1:length(dt.search.result)) {         dt.search.result[[5]][i]] <- str_get_last_word(as.character(dt.search.result[[5]][i]]))         #print(dt.search.result$predicted[i])     } search <- "a few" search <- clean.text(search) dt.search.terms = as.data.table(str_split(search, " "), stringsAsFactors = FALSE) result <- predictor(search)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
=======
install.packages("futile.logger")
install.packages("devtools")
devtools::install_github("bmschmidt/wordVectors")
library(devtools)
install_github("mukul13/rword2vec")
library(rword2vec)
ls("package:rword2vec")
source("C:/dev/r-course/10-capstone/project_4__word2vec.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__word2vec.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
source("C:/dev/r-course/10-capstone/project_4__word2vec.r", echo = TRUE, encoding = "Windows-1252")
suppressMessages(setwd("c:/dev/r-course/10-capstone/"))
source("C:\\dev\\r-course\\10-capstone\\project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_1__setup.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
library(devtools) install_github("mukul13/rword2vec")
library(rword2vec) ls("package:rword2vec")
source("C:/dev/r-course/10-capstone/project_1__setup.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
ana = word_analogy(file_name = "vec.bin", search_words = q1, num = 20)
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
pacman::p_load_current_gh("mlampros/fastTextR") library(fastTextR)
pacman::p_load_current_gh("mlampros/fastTextR") library(fastTextR)
source("C:/dev/r-course/10-capstone/project_4__word2vec.r", echo = TRUE, encoding = "Windows-1252")
res = skipgram_cbow(input_path = "data/final/en_US/en_US.blogs.txt",                     output_path = "/data/fasttext.model",                     method = "skipgram", lr = 0.1,                     lrUpdateRate = 100, dim = 100,                     ws = 5, epoch = 5, minCount = 1,                     neg = 5, wordNgrams = 1, loss = "ns",                     bucket = 2000000, minn = 0,                     maxn = 0, thread = 6, t = 0.0001,                     verbose = 2)
res = predict_unknown_words(skipgram_cbow_model_output = "/data/fasttext.model",                             output_path = "/data/fasttext/NEW_VEC",                             verbose = TRUE)
source("C:/dev/r-course/10-capstone/project_4__word2vec.r", echo = TRUE, encoding = "Windows-1252")
res = skipgram_cbow(input_path = "data/final/en_US/en_US.blogs.txt",                     output_path = "/data/fasttext.model",                     method = "skipgram", lr = 0.1,                     lrUpdateRate = 100, dim = 100,                     ws = 5, epoch = 5, minCount = 1,                     neg = 5, wordNgrams = 1, loss = "ns",                     bucket = 2000000, minn = 0,                     maxn = 0, thread = 6, t = 0.0001,                     verbose = 2)
res = skipgram_cbow(input_path = "data/final/en_US/en_US.blogs.txt",                     output_path = "/data/fasttext.model",                     method = "skipgram", lr = 0.1,                     lrUpdateRate = 100, dim = 100,                     ws = 5, epoch = 5, minCount = 1,                     neg = 5, wordNgrams = 1, loss = "ns",                     bucket = 2000000, minn = 0,                     maxn = 0, thread = 6, t = 0.0001,                     verbose = 2)
devtools::install_github('mlampros/fastTextR')
library(fastTextR)
res = skipgram_cbow(input_path = "data/final/en_US/en_US.blogs.txt",                     output_path = "/data/fasttext.model",                     method = "skipgram", lr = 0.1,                     lrUpdateRate = 100, dim = 100,                     ws = 5, epoch = 5, minCount = 1,                     neg = 5, wordNgrams = 1, loss = "ns",                     bucket = 2000000, minn = 0,                     maxn = 0, thread = 6, t = 0.0001,                     verbose = 2)
res = predict_unknown_words(skipgram_cbow_model_output = "/data/fasttext.model",                             output_path = "/data/fasttext/NEW_VEC",                             verbose = TRUE)
library(fastTextR)
res = skipgram_cbow(input_path = "data/final/en_US/en_US.blogs.txt",                     output_path = "/data/fasttext.model",                     method = "skipgram", lr = 0.1,                     lrUpdateRate = 100, dim = 100,                     ws = 5, epoch = 5, minCount = 1,                     neg = 5, wordNgrams = 1, loss = "ns",                     bucket = 2000000, minn = 0,                     maxn = 0, thread = 6, t = 0.0001,                     verbose = 2) res = predict_unknown_words(skipgram_cbow_model_output = "/data/fasttext.model",                             output_path = "/data/fasttext/NEW_VEC",                             verbose = TRUE)
source("C:/dev/r-course/10-capstone/project_4__word2vec.r", echo = TRUE, encoding = "Windows-1252")
devtools::install_github('mlampros/fastTextR') library(fastTextR) res = skipgram_cbow(input_path = "data/final/en_US/en_US.blogs.txt",                     output_path = "/data/fasttext.model",                     method = "skipgram", lr = 0.1,                     lrUpdateRate = 100, dim = 100,                     ws = 5, epoch = 5, minCount = 1,                     neg = 5, wordNgrams = 1, loss = "ns",                     bucket = 2000000, minn = 0,                     maxn = 0, thread = 6, t = 0.0001,                     verbose = 2) res = predict_unknown_words(skipgram_cbow_model_output = "/data/fasttext.model",                             output_path = "/data/fasttext/NEW_VEC",                             verbose = TRUE)
source("C:/dev/r-course/10-capstone/project_4__word2vec.r", echo = TRUE, encoding = "Windows-1252")
word2vec_file_name <- "word2vec.RData" word2vec_file_path <- get_data_file_path(word2vec_file_name) #if (!file.exists(word2vec_file_path)) {     #model = word2vec(train_file = "data/final/en_US/en_US.blogs.txt", output_file = "vec.bin", binary = 1) #} #load(get_data_file_path(word2vec_file_name)) #-------------------------- # skipgram or cbow methods #-------------------------- devtools::install_github('mlampros/fastTextR') library(fastTextR) res = skipgram_cbow(input_path = "data/final/en_US/en_US.blogs.txt",                     output_path = "/data/fasttext.model",                     method = "skipgram", lr = 0.1,                     lrUpdateRate = 100, dim = 100,                     ws = 5, epoch = 5, minCount = 1,                     neg = 5, wordNgrams = 1, loss = "ns",                     bucket = 2000000, minn = 0,                     maxn = 0, thread = 6, t = 0.0001,                     verbose = 2) res = predict_unknown_words(skipgram_cbow_model_output = "/data/fasttext.model",                             output_path = "/data/fasttext/NEW_VEC",                             verbose = TRUE)
source("C:/dev/r-course/10-capstone/project_4__word2vec.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
res = skipgram_cbow(input_path = "data/final/en_US/en_US.blogs.txt",                     output_path = "/data/fasttext.model",                     method = "skipgram", lr = 0.1,                     lrUpdateRate = 100, dim = 100,                     ws = 5, epoch = 5, minCount = 1,                     neg = 5, wordNgrams = 1, loss = "ns",                     bucket = 2000000, minn = 0,                     maxn = 0, thread = 6, t = 0.0001,                     verbose = 2) res = predict_unknown_words(skipgram_cbow_model_output = "/data/fasttext.model",                             output_path = "/data/fasttext/NEW_VEC",                             verbose = TRUE)
res
source("C:/dev/r-course/10-capstone/project_4__word2vec.r", echo = TRUE, encoding = "Windows-1252")
#word2vec_file_name <- "word2vec.RData" #word2vec_file_path <- get_data_file_path(word2vec_file_name) #if (!file.exists(word2vec_file_path)) {     #model = word2vec(train_file = "data/final/en_US/en_US.blogs.txt", output_file = "vec.bin", binary = 1) #} #load(get_data_file_path(word2vec_file_name)) #-------------------------- # skipgram or cbow methods #-------------------------- suppressMessages(setwd("c:/dev/r-course/10-capstone/")) devtools::install_github('mlampros/fastTextR') library(fastTextR) res = skipgram_cbow(input_path = "data/final/en_US/en_US.blogs.txt",                     output_path = "/data/fasttext.model",                     method = "skipgram", lr = 0.1,                     lrUpdateRate = 100, dim = 100,                     ws = 5, epoch = 5, minCount = 1,                     neg = 5, wordNgrams = 1, loss = "ns",                     bucket = 2000000, minn = 0,                     maxn = 0, thread = 6, t = 0.0001,                     verbose = 2) res = predict_unknown_words(skipgram_cbow_model_output = "/data/fasttext.model",                             output_path = "/data/fasttext/NEW_VEC",                             verbose = TRUE)
suppressMessages(setwd("c:/dev/r-course/10-capstone/"))
p_load("textTinyR")
library(textTinyR)
#word2vec_file_name <- "word2vec.RData" #word2vec_file_path <- get_data_file_path(word2vec_file_name) #if (!file.exists(word2vec_file_path)) {     #model = word2vec(train_file = "data/final/en_US/en_US.blogs.txt", output_file = "vec.bin", binary = 1) #} #load(get_data_file_path(word2vec_file_name)) #-------------------------- # skipgram or cbow methods #-------------------------- suppressMessages(setwd("c:/dev/r-course/10-capstone/")) p_load("textTinyR") library(textTinyR) subset = read_rows(input_file = PATH, read_delimiter = "\n",                    rows = 100,                    write_2file = "data/final/en_US/en_US.blogs.txt")
subset = read_rows(input_file = PATH, read_delimiter = "\n", rows = 100,  write_2file = "data/final/en_US/en_US.blogs.txt")
subset#word2vec_file_name <- "word2vec.RData" #word2vec_file_path <- get_data_file_path(word2vec_file_name) #if (!file.exists(word2vec_file_path)) {     #model = word2vec(train_file = "data/final/en_US/en_US.blogs.txt", output_file = "vec.bin", binary = 1) #} #load(get_data_file_path(word2vec_file_name)) #-------------------------- # skipgram or cbow methods #-------------------------- suppressMessages(setwd("c:/dev/r-course/10-capstone/")) p_load("textTinyR") library(textTinyR) sss = read_rows(input_file = PATH, read_delimiter = "\n", rows = 100,  write_2file = "data/final/en_US/en_US.blogs.txt")
sss
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
require(pacman)
p_load("textTinyR")
library(textTinyR)
sss = read_rows(input_file = PATH, read_delimiter = "\n", rows = 100,  write_2file = "data/final/en_US/en_US.blogs.txt")
sss = read_rows(input_file = "data/final/en_US/en_US.blogs.txt", read_delimiter = "\n", rows = 100, write_2file = "data")
#word2vec_file_name <- "word2vec.RData" #word2vec_file_path <- get_data_file_path(word2vec_file_name) #if (!file.exists(word2vec_file_path)) {     #model = word2vec(train_file = "data/final/en_US/en_US.blogs.txt", output_file = "vec.bin", binary = 1) #} #load(get_data_file_path(word2vec_file_name)) #-------------------------- # skipgram or cbow methods #-------------------------- suppressMessages(setwd("c:/dev/r-course/10-capstone/")) require(pacman) p_load("textTinyR") library(textTinyR) sss = read_rows(input_file = "data/final/en_US/en_US.blogs.txt", read_delimiter = "\n", rows = 100, write_2file = "data/output.bin")
suppressMessages(setwd("c:/dev/r-course/10-capstone/")) require(pacman) p_load("textTinyR") library(textTinyR)
sss = read_rows(input_file = "data/final/en_US/en_US.blogs.txt", read_delimiter = "\n", rows = 100, write_2file = "data/output.bin")
#word2vec_file_name <- "word2vec.RData" #word2vec_file_path <- get_data_file_path(word2vec_file_name) #if (!file.exists(word2vec_file_path)) {     #model = word2vec(train_file = "data/final/en_US/en_US.blogs.txt", output_file = "vec.bin", binary = 1) #} #load(get_data_file_path(word2vec_file_name)) #-------------------------- # skipgram or cbow methods #-------------------------- suppressMessages(setwd("c:/dev/r-course/10-capstone/")) require(pacman) p_load("textTinyR") library(textTinyR) sss = read_rows(input_file = "data/final/en_US/en_US.blogs.txt", read_delimiter = "\n", rows = 100, write_2file = "data/output.bin")
sss = read_rows(input_file = "data/final/en_US/en_US.blogs.txt", write_2file = "data/output.bin")
sss = read_rows(input_file = "c:/dev/r-course/10-capstone/data/final/en_US/en_US.blogs.txt", write_2file = "data/output.bin")
source("C:/dev/r-course/10-capstone/project_4__word2vec.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__word2vec.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_1__setup.r", echo = TRUE, encoding = "Windows-1252")
pacman::p_load_current_gh("mlampros/fastTextR")
source("C:/dev/r-course/10-capstone/project_1__setup.r", echo = TRUE, encoding = "Windows-1252")
using("fastrtext")
pacman::p_load_current_gh("pommedeterresautee/fastrtext")
install.packages("pacman")
pacman::p_load_current_gh("pommedeterresautee/fastrtext")
p_load_current_gh("pommedeterresautee/fastrtext")
install_github("pommedeterresautee/fastrtext")
install_github("pommedeterresautee/fastrtext") library(fastTextR)
library(fastrtext)
devtools::install_github("pommedeterresautee/fastrtext")
require(fastrtext)
devtools::install_github("pommedeterresautee/fastrtext")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
p_load("text2vec")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
data.stringified <- paste(data.all, collapse = '')
it <- itoken(data.stringified, preprocess_function = tolower,              tokenizer = word_tokenizer, chunks_number = 10, progessbar = F)
source("C:/dev/r-course/10-capstone/project_4__tokenization.r", echo = TRUE, encoding = "Windows-1252")
vocab <- vocab %>%     prune_vocabulary(term_count_min = 10, doc_proportion_max = 0.5, doc_proportion_min = 0.001)
source("C:/dev/r-course/10-capstone/project_4__tokenization.r", echo = TRUE, encoding = "Windows-1252")
t1 <- Sys.time() vocab <- vocabulary(src = it, ngram = c(1L, 3L))
source("C:/dev/r-course/10-capstone/project_4__tokenization.r", echo = TRUE, encoding = "Windows-1252")
it <- itoken(data.stringified, preprocess_function = tolower,              tokenizer = word_tokenizer, chunks_number = 10, progessbar = F)
source("C:/dev/r-course/10-capstone/project_4__tokenization.r", echo = TRUE, encoding = "Windows-1252")
 it <- itoken(data.stringified, preprocess_function = tolower, tokenizer = word_tokenizer, chunks_number = 10, progessbar = F)
it
source("C:/dev/r-course/10-capstone/project_4__tokenization.r", echo = TRUE, encoding = "Windows-1252")
df.tokens <- itoken(data.stringified, preprocess_function = tolower, tokenizer = word_tokenizer, chunks_number = 10, progessbar = F)
vocab <- vocabulary(src = df.tokens, ngram = c(1L, 3L))
source("C:/dev/r-course/10-capstone/project_4__tokenization.r", echo = TRUE, encoding = "Windows-1252")
p_load("text2vec")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__tokenization.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__tokenization.r", echo = TRUE, encoding = "Windows-1252")
it <- itoken(data.stringified, preprocess_function = tolower, tokenizer = word_tokenizer, chunks_number = 10, progessbar = F)
data.stringified <- paste(data.all, collapse = '') vocab <- vocabulary(src = it, ngram = c(1L, 3L))
vocab <- vocabulary(src = it, ngram = c(1L, 3L))
vocab <- vocabulary(it, ngram = c(1L, 3L))
fh <- feature_hasher(hash_size = 2 ** 18, ngram = c(1L, 3L))
vocab <- create_vocabulary(it, ngram = c(1L, 3L))
source("C:/dev/r-course/10-capstone/project_4__tokenization.r", echo = TRUE, encoding = "Windows-1252")
>>>>>>> 6cb9cea540a62888912aec733dcedef23da732d7
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__tokenization.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__tokenization.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__tokenization.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__tokenization.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__tokenization.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__tokenization.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_2__data_retrieval.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_2__data_retrieval.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
result
predictor(q1)
source("C:/dev/r-course/10-capstone/prediction.tests.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1)
predictor(q2)
source("C:/dev/r-course/10-capstone/prediction.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
result
source("C:/dev/r-course/10-capstone/prediction.tests.R", echo = TRUE, encoding = "Windows-1252")
using("assertthat") q1 <- "When you breathe, I want to be the air for you. I'll be there for you, I'd live and I'd" q2 <- "Guy at my table's wife got up to go to the bathroom and I asked about dessert and he started telling me about his" q3 <- "I'd give anything to see arctic monkeys this" q4 <- "Talking to your mom has the same effect as a hug and helps reduce your" q5 <- "When you were in Holland you were like 1 inch away from me but you hadn't time to take a" q6 <- "I'd just like all of these questions answered, a presentation of evidence, and a jury to settle the" q7 <- "I can't deal with unsymetrical things. I can't even hold an uneven number of bags of groceries in each" q8 <- "Every inch of you is perfect from the bottom to the" q9 <- "I’m thankful my childhood was filled with imagination and bruises from playing" q10 <- "I like how the same people are in almost all of Adam Sandler's" #source('c:/dev/r-course/10-capstone/predictor.r') predictor(q1) predictor(q2)
predictor(q1)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/prediction.tests.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1)
if (length(dt.search.result) == 0) dt.search.result
predictor(q2)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/prediction.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/prediction.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/prediction.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
#' Search ngrams with identical first two words.  #' Calculate probabilities using modified Kneser - Ney smoothing.  #' Use the word with the highest probability as prediction and the words with the highest probabilities as possible choices. #' relies on n2,n3,n4,n5 #' @param sentence  #' #' @return #' @export #' #' @examples #' https://en.wikipedia.org/wiki/Katz%27s_back-off_model predictor <- function(sentence) {     if (is.na(sentence)) {         warning("sentence NA or empty")         stop()     }     flog.debug(paste("predictor --> sentence.cleaned =", sentence))     dt.search.terms = as.data.table(str_split(sentence, " "), stringsAsFactors = FALSE)     term_count <- nrow(dt.search.terms)     if (term_count > 5) {            term_count <- 4     }     dt.search.result <- c("ngram", "word", "freq", "length", "predicted")     counter <-1         while (counter < term_count) {         ng_id <- term_count - (counter) + 2         result <- search_ngram(dt.search.terms[counter:term_count], ng_id)         if (nrow(result) > 0) {             msg <- paste("predictor --> ngram ", ng_id, "found", nrow(result))             flog.debug(msg)             df.row <- sqldf(paste("select word, freq, length, word as predicted from result")) #            predicted_word <- lapply(df.row[4], function(x) str_get_last_word(x))             dt.search.result <- rbind(dt.search.result, data.frame(ngram = ng_id, word = df.row[1], freq = df.row[2], length = df.row[3], predicted = df.row[4]))         }         counter <- counter + 1     }     flog.debug(dt.search.result)     if (!is.null(dt.search.result) && length(dt.search.result) > 0) {         for (i in 1:nrow(dt.search.result)) {             dt.search.result[[5]][i] <- str_get_last_word(as.character(dt.search.result[[5]][i]))             #print(dt.search.result$predicted[i])         }     }     dt.search.result } #' Cycle down ngram functions when no data found #' #' @param ngram #' #' @return #' @export #' #' @examples search_ngram <- function(search_terms, take) {     #term_count <- 3     flog.debug(paste("search_terms count", nrow(search_terms)))     arg <- paste(search_terms$V1, sep = " ", collapse = " ")     arg <- str_trim(arg)     if (arg=="") stop("arg empty")     sql <- paste0("select * from n", take, " where word like '", arg, "%' order by freq desc limit 10")     flog.debug(paste("predictor --> search_ngram --> sql ngram =", sql))     df.result <- sqldf(sql)     df.result } search <- "a few" search <- clean.text(search) dt.search.terms = as.data.table(str_split(search, " "), stringsAsFactors = FALSE) result <- predictor(search) result
source("C:/dev/r-course/10-capstone/prediction.tests.R", echo = TRUE, encoding = "Windows-1252")
dt.search.result <- c("ngram", "word", "freq", "length", "predicted")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/prediction.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1)
source("C:/dev/r-course/10-capstone/prediction.tests.R", echo = TRUE, encoding = "Windows-1252")
predictor(q2)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/prediction.tests.R", echo = TRUE, encoding = "Windows-1252")
dt.search.result$predicted <- str_get_last_word(dt.search.result$predicted)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
dt.search.result <- as.data.table(dt.search.result)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
dt.search.result <- colnames("ngram", "word", "freq", "length", "predicted")
dt.search.result <- colnames(c("ngram", "word", "freq", "length", "predicted"))
dt.search.result
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1)
dt.search.result$predicted <- gsub("\s(\w+)$", "", dt.search.result$predicted)
dt.search.result$predicted <- gsub("\\s*\\w*$", "", dt.search.result$predicted)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1)
search <- "a few" search <- clean.text(search) dt.search.terms = as.data.table(str_split(search, " "), stringsAsFactors = FALSE) result <- predictor(search) result
dt.search.result <- colnames(c("ngram", "word", "freq", "length", "predicted"))
counter <-1         while (counter < term_count) {         ng_id <- term_count - (counter) + 2         result <- search_ngram(dt.search.terms[counter:term_count], ng_id)         if (nrow(result) > 0) {             msg <- paste("predictor --> ngram ", ng_id, "found", nrow(result))             flog.debug(msg)             df.row <- sqldf(paste("select word, freq, length, word as predicted from result")) #            predicted_word <- lapply(df.row[4], function(x) str_get_last_word(x))             dt.search.result <- rbind(dt.search.result, data.frame(ngram = ng_id, word = df.row[1], freq = df.row[2], length = df.row[3], predicted = df.row[4]))         }         counter <- counter + 1     }
predictor(q1)
search <- "a few" search <- clean.text(search) dt.search.terms = as.data.table(str_split(search, " "), stringsAsFactors = FALSE) result <- predictor(search) result
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1)
predictor(q1)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
words <- stringr::word("a few good meb")
words[length(words) - 1]
unlist(words[length(words) - 1])
words <- stringr::word("a few good meb")
words <- stringr::word("a few good meb",start = 1L)
words <- stringr::word("a few good meb",start = 1L)
words
words <- stringr::word(c("a few good meb"),start = 1L)
words
words <- stringr::word(c("a few good meb"))
words
sentences <- c("Jane saw a cat", "Jane sat down") word(sentences, 1)
sentences <- c("Jane saw a cat") word(sentences, 1)
sentences <- c("Jane saw a cat")
word(sentences, -1)
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
#' Given a sentence get the last word #' #'http://stringr.tidyverse.org/reference/word.html str_get_last_word <- function(str) {     sentences <- c(str)     last <- word(sentences, -1)     last }
str_get_last_word("got me a job int he city")
class(str_get_last_word("got me a job int he city"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
result <- predictor(search)
result
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/prediction.tests.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1)
predictor(q2)
a1 <- predictor(q1)
source("C:/dev/r-course/10-capstone/prediction.tests.R", echo = TRUE, encoding = "Windows-1252")
predictor(q10)
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_1__setup.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_2__data_retrieval.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_2__data_retrieval.r", echo = TRUE, encoding = "Windows-1252")
data.blogs <- read_file("data/final/en_US/en_US.blogs.txt")     data.news <- read_file("data/final/en_US/en_US.news.txt")     data.twitter <- read_file("data/final/en_US/en_US.twitter.txt")     data.blogs = iconv(data.blogs, "latin1", "ASCII", sub = "")     data.news = iconv(data.news, "latin1", "ASCII", sub = "")     data.twitter = iconv(data.twitter, "latin1", "ASCII", sub = "")
sample.blogs <- combine_samples(data.blogs, 10)
combine_samples(data.blogs,5)
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
combine_samples(data.blogs,5)
y <- sample(x,.05)
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
combine_samples <- function(x, size) {     y <- sample(x,.05)     size <- size - 1     while (size > 0) {         z <- smaller(x, .01)         merge(y, z)         size <- size - 1     }     y }
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
combine_samples(data.blogs,5)
source("C:/dev/r-course/10-capstone/project_2__data_retrieval.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_2__data_retrieval.r", echo = TRUE, encoding = "Windows-1252")
source('C:/dev/r-course/10-capstone/project_0_run.r', echo=TRUE)
source('C:/dev/r-course/10-capstone/project_0_run.r', echo=TRUE)
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
require(tau)
require(tau)
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/prediction.tests.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1)
predictor(q1)
predictor(q2)
predictor(q3)
predictor(q3)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q3, c("decade", "morning", "weekend", "month"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q3, c("decade", "morning", "weekend", "month"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q3, c("decade", "morning", "weekend", "month"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q3, c("decade", "morning", "weekend", "month"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q3, c("decade", "morning", "weekend", "month"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q3, c("decade", "morning", "weekend", "month"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q3, c("decade", "morning", "weekend", "month"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q3, c("decade", "morning", "weekend", "month"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q3, c("decade", "morning", "weekend", "month"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q3, c("decade", "morning", "weekend", "month"))
predictor(q1, c("give", "eat", "die", "sleep")))
predictor(q1, c("give", "eat", "die", "sleep"))
predictor(q1, c("give", "eat", "die", "sleep"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
dt.search.result
predictor(q1, c("give", "eat", "die", "sleep"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
redictor(q1, c("give", "eat", "die", "sleep"))
predictor(q1, c("give", "eat", "die", "sleep"))
aa <- sqldf("select * from n1 where word in ('horticultural','financial','marital','spiritual')")
sqldf("select * from n1 where word in ('horticultural','financial','marital','spiritual')")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
    ### quiz hints --> choose the most frequest     if (!is.null(hints) && length(hints) > 1) {         sql <- paste0("select * from n1 where word in ('", hints[1], "' , '", hints[2], "', '", hints[3], "', '", hints[4], "')")         flog.debug(paste("predictor --> hints sql ", sql))         sqldf(sql)         stop()     }
hints <- c("give", "eat", "die", "sleep")
sql <- paste0("select * from n1 where word in ('", hints[1], "' , '", hints[2], "', '", hints[3], "', '", hints[4], "')")
flog.debug(paste("predictor --> hints sql ", sql))
sqldf(sql)
hints <- c("give", "eat", "die", "sleep") sql <- paste0("select * from n1 where word in ('", hints[1], "' , '", hints[2], "', '", hints[3], "', '", hints[4], "') order by freq desc") flog.debug(paste("predictor --> hints sql ", sql)) sqldf(sql)
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
predictor(q3, c("decade", "morning", "weekend", "month"))
predictor(q1, c("give", "eat", "die", "sleep"))
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
predictor(q3, c("decade", "morning", "weekend", "month"))
predictor(q4, c("hunger", "happiness", "stress", "sleepiness"))
predictor(q4, c("hunger", "happiness", "stress", "sleepiness"))
predictor(q5, c("minute", "picture", "walk", "look"))
predictor(q10, c("movies", "novels", "stories", "pictures"))
predictor(q9, c("weekly", "outside", "daily", "inside"))
predictor(q8, c("center", "side", "top", "middle"))
predictor(q7, c("toe", "hand", "finger", "arm"))
predictor(q6, c("case", "account", "incident", "matter"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
sql <- paste0("select * from dt.search.result where predicted in ('", hints[1], "' , '", hints[2], "', '", hints[3], "', '", hints[4], "') order by freq desc")         flog.debug(paste("predictor --> hints sql ", sql))         dt.found <- (sqldf(sql))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
gg <- predictor("When you breathe, I want to be the air for you. I'll be there for you, I'd live and I'd")
sql <- paste0("select * from gg where predicted in ('", hints[1], "' , '", hints[2], "', '", hints[3], "', '", hints[4], "') order by freq desc")
flog.debug(paste("predictor --> hints sql ", sql))
dt.found <- (sqldf(sql))
gg <- as.data.table(gg)
sql <- paste0("select * from gg where predicted in ('", hints[1], "' , '", hints[2], "', '", hints[3], "', '", hints[4], "') order by freq desc")
flog.debug(paste("predictor --> hints sql ", sql))
dt.found <- (sqldf(sql))
sql <- paste0("select * from gg where predicted in ('", hints[1], "' , '", hints[2], "', '", hints[3], "', '", hints[4], "') order by freq desc") flog.debug(paste("predictor --> hints sql ", sql))
dt.found <- (sqldf(sql))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
gg <- predictor("When you breathe, I want to be the air for you. I'll be there for you, I'd live and I'd")
sql <- paste0("select * from gg where predicted in ('", hints[1], "' , '", hints[2], "', '", hints[3], "', '", hints[4], "') order by freq desc")
flog.debug(paste("predictor --> hints sql ", sql))
dt.found <- (sqldf(sql))
gg$predicted <- unlist(gg$predicted)
dt.found <- (sqldf(sql))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
predictor(q1, c("give", "eat", "die", "sleep"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
predictor(q3, c("decade", "morning", "weekend", "month"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q3, c("decade", "morning", "weekend", "month"))
predictor(q4, c("hunger", "happiness", "stress", "sleepiness")) #######
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q4, c("hunger", "happiness", "stress", "sleepiness")) #######
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q4, c("hunger", "happiness", "stress", "sleepiness")) #######
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q4, c("hunger", "happiness", "stress", "sleepiness")) #######
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q4, c("hunger", "happiness", "stress", "sleepiness")) #######
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q4, c("hunger", "happiness", "stress", "sleepiness")) #######
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
predictor(q3, c("decade", "morning", "weekend", "month"))
predictor(q4, c("hunger", "happiness", "stress", "sleepiness")) #######
devtools::install_github("ggrothendieck/sqldf")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
predictor(q3, c("decade", "morning", "weekend", "month"))
predictor(q4, c("hunger", "happiness", "stress", "sleepiness")) #######
predictor(q5, c("minute", "picture", "walk", "look"))
predictor(q6, c("case", "account", "incident", "matter"))
predictor(q7, c("toe", "hand", "finger", "arm")) #####
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
predictor(q3, c("decade", "morning", "weekend", "month"))
predictor(q4, c("hunger", "happiness", "stress", "sleepiness")) #######
source("C:/dev/r-course/10-capstone/project_1__setup.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q5, c("minute", "picture", "walk", "look"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
predictor(q3, c("decade", "morning", "weekend", "month"))
predictor(q4, c("hunger", "happiness", "stress", "sleepiness")) #######
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q3, c("decade", "morning", "weekend", "month"))
predictor(q4, c("hunger", "happiness", "stress", "sleepiness")) #######
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q10, c("movies", "novels", "stories", "pictures"))
predictor(q8, c("center", "side", "top", "middle"))
predictor(q1, c("give", "eat", "die", "sleep"))
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
predictor(q3, c("decade", "morning", "weekend", "month"))
predictor(q4, c("hunger", "happiness", "stress", "sleepiness")) #######
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q6, c("case", "account", "incident", "matter"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
predictor(q3, c("decade", "morning", "weekend", "month"))
predictor(q4, c("hunger", "happiness", "stress", "sleepiness")) #######
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
predictor(q3, c("decade", "morning", "weekend", "month"))
predictor(q4, c("hunger", "happiness", "stress", "sleepiness")) #######
predictor(q5, c("minute", "picture", "walk", "look"))
predictor(q6, c("case", "account", "incident", "matter"))
predictor(q7, c("toe", "hand", "finger", "arm")) #####
predictor(q8, c("center", "side", "top", "middle"))
predictor(q9, c("weekly", "outside", "daily", "inside"))
predictor(q10, c("movies", "novels", "stories", "pictures"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
predictor(q3, c("decade", "morning", "weekend", "month"))
predictor(q4, c("hunger", "happiness", "stress", "sleepiness")) #######
predictor(q5, c("minute", "picture", "walk", "look"))
predictor(q6, c("case", "account", "incident", "matter"))
predictor(q7, c("toe", "hand", "finger", "arm")) #####
predictor(q8, c("center", "side", "top", "middle"))
predictor(q9, c("weekly", "outside", "daily", "inside"))
predictor(q10, c("movies", "novels", "stories", "pictures"))
predictor(q1, c("give", "eat", "die", "sleep"))
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__ngram_generation.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
devtools::install_github("ggrothendieck/sqldf")
require(sqldf)
source("C:/dev/r-course/10-capstone/project_4__ngram_generation.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
source("C:/dev/r-course/10-capstone/prediction.tests.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep"))
predictor(q2, c("horticultural", "financial", "marital", "spiritual"))
predictor(q3, c("decade", "morning", "weekend", "month"))
predictor(q4, c("hunger", "happiness", "stress", "sleepiness")) #######
predictor(q5, c("minute", "picture", "walk", "look"))
predictor(q6, c("case", "account", "incident", "matter"))
predictor(q7, c("toe", "hand", "finger", "arm")) #####
predictor(q8, c("center", "side", "top", "middle"))
predictor(q9, c("weekly", "outside", "daily", "inside"))
predictor(q10, c("movies", "novels", "stories", "pictures"))
predictor(q1, c("give", "eat", "die", "sleep"))
predictor(q4, c("hunger", "happiness", "stress", "sleepiness")) #######
predictor(q7, c("toe", "hand", "finger", "arm")) #####
predictor(q8, c("center", "side", "top", "middle")) #### 
predictor(q9, c("weekly", "outside", "daily", "inside")) ####
predictor(q10, c("movies", "novels", "stories", "pictures"))
predictor(q5, c("minute", "picture", "walk", "look"))
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
predictor(q10, c("movies", "novels", "stories", "pictures")) # NOT picture
source("C:/dev/r-course/10-capstone/prediction.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep")) #NOT give
predictor(q2, c("horticultural", "financial", "marital", "spiritual")) # marital
predictor(q3, c("decade", "morning", "weekend", "month")) # weekend
predictor(q4, c("hunger", "happiness", "stress", "sleepiness")) ####### stress
predictor(q5, c("minute", "picture", "walk", "look")) #picture
predictor(q6, c("case", "account", "incident", "matter")) #
predictor(q7, c("toe", "hand", "finger", "arm")) ##### hand
predictor(q8, c("center", "side", "top", "middle")) #### top
predictor(q10, c("movies", "novels", "stories", "pictures")) # NOT picture
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
p_load("corpus")
p_load("corpus")
install.packages("corpus", dependencies = TRUE)
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__rcorpus.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_3__data_clean.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__rcorpus.r", echo = TRUE, encoding = "Windows-1252")
tm <- term_matrix(text, ngrams = 1:3)
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
tm <- term_matrix(data.stringified, ngrams = 1:3)
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
tm$p
source("C:/dev/r-course/10-capstone/project_4__rcorpus.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__rcorpus.r", echo = TRUE, encoding = "Windows-1252")
matrix_corpus
matrix_corpus()
matrix_corpus <- function(text, ngram_size = 5, min_count = 5) {     f <- corpus::text_filter(stemmer = "en", drop_punct = TRUE,                              drop_number = TRUE)     stats <- corpus::term_stats(text, f, ngrams = ngram_size,                                 min_count = min_count)     x <- corpus::term_matrix(text, f, select = stats$term)     x }
tm <- matrix_corpus(data.stringified, 5,5)
data.stringified
source("C:/dev/r-course/10-capstone/project_4__rcorpus.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__rcorpus.r", echo = TRUE, encoding = "Windows-1252")
text <- data.stringified
text <- data.stringified
f <- corpus::text_filter(stemmer = "en", drop_punct = TRUE, drop_number = TRUE)
stats <- corpus::term_stats(text, f, ngrams = 1:ngram_size, min_count = min_count, types = TRUE)
x <- corpus::term_matrix(text, f, select = stats$term)
stats <- corpus::term_stats(text, f, ngrams = 1:5, min_count = min_count, types = TRUE)
stats <- corpus::term_stats(text, f, ngrams = 1:5, min_count = 5, types = TRUE)
x <- corpus::term_matrix(text, f, select = stats$term)
install.packages(c("microbenchmark", "corpus", "quanteda", "text2vec", "tidytext", "tm"))
# We will use the Snowball English stop word list: stop_words <- corpus::stopwords_en
source("C:/dev/r-course/10-capstone/project_4__rcorpus.r", echo = TRUE, encoding = "Windows-1252")
head(x)
xx < -term_matrix(text,ngrams = 1:5)
xx < -term_matrix(text,ngrams = 1:5)
xx <- term_matrix(text,ngrams = 1:5)
x <- corpus::term_matrix(text, f)
term_stats(text,f,ngrams = 1:3)
xx <- term_stats(text,f,ngrams = 1:3)
data <- sqldf("select term as word, count as freq from xx")
source("C:/dev/r-course/10-capstone/project_4__rcorpus.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__rcorpus.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__rcorpus.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_3__data_clean.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__rcorpus.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__rcorpus.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
f <- corpus::text_filter(stemmer = "en", drop_punct = TRUE,  drop_number = TRUE, drop = stop_words)
source("C:/dev/r-course/10-capstone/project_4__rcorpus.r", echo = TRUE, encoding = "Windows-1252")
text <- data.stringified
        f <- corpus::text_filter(stemmer = "en", drop_punct = TRUE,  drop_number = TRUE, drop = stop_words)
ngram_size <- 5
ng <- term_stats(text, f, ngrams = ngram_size, min_count = 10)
ngram <- data.table(word = ng$term, freq = ng$count, length = ng$support))
ngram <- data.table(word = ng$term, freq = ng$count, length = ng$support)
ng <- term_stats(text, f, ngrams = ngram_size, min_count = 10,,min_support = 2)
ngram_size <- 2
f <- corpus::text_filter(stemmer = "en", drop_punct = TRUE,  drop_number = TRUE, drop = stop_words)
        ng <- term_stats(text, f, ngrams = ngram_size, min_count = 10,,min_support = 2)
ng <- term_stats(text, filt, ngrams = ngram_size, min_count = 10,,min_support = 1)
        ngram_size <- 2
        filt <- corpus::text_filter(stemmer = "en", drop_punct = TRUE,  drop_number = TRUE, drop = stop_words)
        ng <- term_stats(text, filt, ngrams = ngram_size, min_count = 10,,min_support = 1)
data.all <- parallelize_task_chunked(clean_text,data.all)
data.all <- parallelize_task_chunked(clean_text,data.all,1000)
data.all <- lapply(data.all,  function(x) {clean_text(x) })
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
data.all <- lapply(data.all,  function(x) {clean_text(x) })
data.all <- parallelize_task_chunked(clean_text,data.all,5000)
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
source("C:/dev/r-course/10-capstone/project_3__data_clean.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__rcorpus.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep")) #NOT give
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
q1 <- "When you breathe, I want to be the air for you. I'll be there for you, I'd live and I'd"
predictor(q1, c("give", "eat", "die", "sleep")) #NOT give
predictor(q2, c("horticultural", "financial", "marital", "spiritual")) # marital
text_match(data.stringified, c("horticultural", "financial", "marital", "spiritual"))
xxx <- text_match(data.stringified, c("horticultural", "financial", "marital", "spiritual"))
xxx
yyy<- sqldf("select term, count(term) as total from xxx group by term")
predictor(q2, c("horticultural", "financial", "marital", "spiritual")) # marital
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__rcorpus.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
sqldf("select * from n1 where word like 'right now%'  order by freq desc limit 10 ")
sqldf("select * from n1 where word like '%right now%'  order by freq desc limit 10 ")
sqldf("select * from n2 where word like '%right now%'  order by freq desc limit 10 ")
sqldf("select * from n2 where word like 'right now%'  order by freq desc limit 10 ")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q7, c("toe", "hand", "finger", "arm")) ##### hand
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep")) #NOT give
predictor(q2, c("horticultural", "financial", "marital", "spiritual")) # marital
text_match(data.stringified, c("horticultural", "financial", "marital", "spiritual"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q2, c("horticultural", "financial", "marital", "spiritual")) # marital
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q2, c("horticultural", "financial", "marital", "spiritual")) # marital
predictor(q10, c("movies", "novels", "stories", "pictures"))
text_locate(data.stringified, c("horticultural", "financial", "marital", "spiritual"))
predictor(q10, c("movies", "novels", "stories", "pictures")) # movies
#' Given a sentence get the last words #' #'http://stringr.tidyverse.org/reference/word.html str_get_last_words <- function(str, total) {     sentences <- c(str)     last <- word(sentences, -1 * total) }
str_get_last_words("hello how are you", 2)
#' Given a sentence get the last words #' #'http://stringr.tidyverse.org/reference/word.html str_get_last_words <- function(str, total) {     sentences <- c(str)     last <- word(sentences, -1 * total)     last }
str_get_last_words("hello how are you", 2)
#' Given a sentence get the last words #' #'http://stringr.tidyverse.org/reference/word.html str_get_last_words <- function(str, total) {     sentences <- c(str)     total <- -1 * total     last <- word(sentences,total,total)     last }
str_get_last_words("hello how are you", 2)
#' Given a sentence get the last words #' #'http://stringr.tidyverse.org/reference/word.html str_get_last_words <- function(str, total) {     sentences <- c(str)     last <- word(sentences,-1,total)     last }
str_get_last_words("hello how are you", 2)
#' Given a sentence get the last words #' #'http://stringr.tidyverse.org/reference/word.html str_get_last_words <- function(str, total) {     sentences <- c(str)     last <- word(sentences,total,total)     last }
str_get_last_words("hello how are you", 2)
str_get_last_words("hello how are you", 4)
str_get_last_words("hello how are you", 4)
str_get_last_words("hello how are you", 3)
txt <- "hello how are you"
stringr::str_get_word()
require(stringr)
stringr::str_split(txt)
stringr::str_split(txt, " ")
xxx <- stringr::str_split(txt, " ")
xxx <- xxx[subset[2:length(txt)]]
yyy
txt <- "hello how are you" xxx <- stringr::str_split(txt, " ") yyy <- "" for (i in 1:length(xxx)) {     yyy <- paste(yyy, xxx[i])     }
yyy
str_get_words("hi what is happening", 3)
#' Given a sentence get the last words str_get_words <- function(str, total) {     xxx <- stringr::str_split(str, " ")     yyy <- ""     for (i in 1:total) {         yyy <- paste(yyy, xxx[i])     }     yyy }
str_get_words("hi what is happening", 3)
str_get_words("hi what is happening", 1)
#' Given a sentence get the last words str_get_words <- function(str, total) {     xxx <- stringr::str_split(str, " ")     yyy <- ""     for (i in total:length(xxx)) {         yyy <- paste(yyy, xxx[i])     }     yyy }
str_get_words("hi what is happening", 1)
#' Given a sentence get the last words str_get_words <- function(str, total) {     xxx <- stringr::str_split(str, " ")    if (total = 1) return(xxx[1]) } str_get_words("hi what is happening", 1)
xxx <- stringr::str_split(str, " ")
xxx[1]
unlist(xxx[1])
#' Given a sentence get the last words str_get_words <- function(str, total) {     xxx <- strsplit(str, " ")    if (total = 1) return(xxx[1]) }
 #' Given a sentence get the last words str_get_words <- function(str, total) {     xxx <- strsplit(str, " ")    if (total = 1) return(xxx[1]) } xxx <- stringr::str_split(str, " ") if (total = 1) return(xxx[1]) str_get_words("hi what is happening", 1) unlist(xxx[1])
#' Given a sentence get the last words str_get_words <- function(str, total) {     xxx <- strsplit(str, " ")    if (total = 1) return(xxx[1]) }
#' Given a sentence get the last words str_get_words <- function(str, total) {     xxx <- strsplit(str, " ")    if (total = 1) return(xxx[1]) }
#' Given a sentence get the last words str_get_words <- function(str, total) {     xxx <- strsplit(str, " ")     if (total = 1) return(xxx[1])     xxx[1] }
#' Given a sentence get the last words str_get_words <- function(str, total) {     xxx <- strsplit(str, " ")     if (total = 1) return(xxx[1])     xxx[1] }
#' Given a sentence get the last words str_get_words <- function(str, total)     {     xxx <- strsplit(str, " ")     if (total = 1) return(xxx[1])     xxx[1] }
str_get_words <- function(str, total){ }
#' Given a sentence get the last words str_get_words <- function(str, total){     array <- unlist(strsplit(str, ' ')) } str_get_words("hi what is happening", 1)
#' Given a sentence get the last words str_get_words <- function(str, total){     array <- unlist(strsplit(str, ' '))     array } str_get_words("hi what is happening", 1)
#' Given a sentence get the last words str_get_words <- function(str, total){     array <- unlist(strsplit(str, ' '))     array[total, length(array)] } str_get_words("hi what is happening", 1)
#' Given a sentence get the last words str_get_words <- function(str, total){     array <- unlist(strsplit(str, ' '))     array[total, length(array)-1] } str_get_words("hi what is happening", 2)
#' Given a sentence get the last words str_get_words <- function(str, total){     array <- unlist(strsplit(str, ' '))     array } res <- str_get_words("hi what is happening", 2) class(res)
#' Given a sentence get the last words str_get_words <- function(str, total){     array <- unlist(strsplit(str, ' '))     array } res <- str_get_words("hi what is happening", 2) res
res[1]
paste(res[1,res[2]])
paste(res[1],res[2])
#' Given a sentence get the last words str_get_words <- function(str, total){     array <- unlist(strsplit(str, ' '))     result <- ""     row <- length(array)     while (total > 1) {         item <- row-total         result <- paste(result, array[item])         total <- total < -1     }     result } res <- str_get_words("hi what is happening", 2)
res
txt <- "hi what is happening"
array <- unlist(strsplit(txt, ' '))
result <- "" row <- length(array) while (total > 1) {     item <- row - total     result <- paste(result, array[item])     total <- total < -1 } result
total <- 2
array <- unlist(strsplit(txt, ' ')) result <- "" row <- length(array) while (total > 1) {     item <- row - total     result <- paste(result, array[item])     total <- total < -1 } result
array <- unlist(strsplit(txt, ' ')) result <- "" while (total > 1) {     item <- row - total     result <- paste(result, array[item])     total <- total < -1 } result
tmp <- array[1]
tmp
array <- unlist(strsplit(txt, ' '))
length(array)
array[2,]
array[2]
from <- length(array) - total
array[, from:length(array)]
array[from:length(array)]
txt <- "hi what is happening" total <- 3
array <- unlist(strsplit(txt, ' '))
from <- length(array) - total
array[from:length(array)]
from
from <- length(array) - total-1
array[from:length(array)]
array[3:length(array)]
from <- length(array) - total-1
from
total
total <- 2
array <- unlist(strsplit(txt, ' ')) from <- length(array) - total
array[from:length(array)]
total <- 1
from <- length(array) - total array[from:length(array)]
lst <- array[from:length(array)]
stringi::stri_join_list(lst)
stringi::stri_flatten(lst)
stringi::stri_flatten(lst, collapse= " ")
txt <- "hi what is happening" total <- 1 array <- unlist(strsplit(txt, ' ')) from <- (length(array)+1) - total lst <- array[from:length(array)]
stringi::stri_flatten(lst, collapse= " ")
txt <- "hi what is happening" total <- 2 array <- unlist(strsplit(txt, ' ')) from <- (length(array)+1) - total lst <- array[from:length(array)] stringi::stri_flatten(lst, collapse= " ")
#' Given a sentence get the last words str_get_words <- function(str, total){     array <- unlist(strsplit(txt, ' '))     from <- (length(array) + 1) - total     lst <- array[from:length(array)]     stringi::stri_flatten(lst, collapse = " ") } txt <- "hi what is happening" total <- 2 str_get_words(txt,total)
txt <- "hi what is happening" total <- 3 str_get_words(txt,total)
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q10, c("movies", "novels", "stories", "pictures")) # movies
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q2, c("horticultural", "financial", "marital", "spiritual")) # marital
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q2, c("horticultural", "financial", "marital", "spiritual")) # marital
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q2, c("horticultural", "financial", "marital", "spiritual")) # marital
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
predictor(q1, c("give", "eat", "die", "sleep")) # die
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q1, c("give", "eat", "die", "sleep")) # die
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q2, c("horticultural", "financial", "marital", "spiritual")) # marital
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q3, c("decade", "morning", "weekend", "month")) # weekend
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q4, c("hunger", "happiness", "stress", "sleepiness")) ####### stress
predictor(q6, c("case", "account", "incident", "matter")) # not case
predictor(q8, c("center", "side", "top", "middle")) #### top
predictor(q10, c("movies", "novels", "stories", "pictures")) # movies
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q10, c("movies", "novels", "stories", "pictures")) # movies
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
data.all <- apply(data.all, 1, removeWords(stopwords))
require("tm")
data.all <- apply(data.all, 1, removeWords(stopwords))
data.stringified <- paste(data.all, collapse = '') # We will use the Snowball English stop word list: stop_words <- corpus::stopwords_en data.all <- unlist(strsplit(data.stringified, " ")) data.stringified <- paste(x[!x %in% stop_words], collapse = " ")
data.stringified <- paste(data.all[!data.all %in% stop_words], collapse = " ")
 if ((!file.exists(get_data_file_path("data.stringified.RData")))) {     data.stringified <- paste(data.all, collapse = '')     # We will use the Snowball English stop word list:     stop_words <- corpus::stopwords_en     data.all <- unlist(strsplit(data.stringified, " "))     data.stringified <- paste(data.all[!data.all %in% stop_words], collapse = " ")     save(data.all, file = get_data_file_path("data.stringified.RData")) } load(get_data_file_path("data.stringified.RData"))
source("C:/dev/r-course/10-capstone/project_3__data_clean.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_3__data_clean.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor(q10, c("movies", "novels", "stories", "pictures")) # movies
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
q9 <- "I’m thankful my childhood was filled with imagination and bruises from playing"
predictor(q9, c("weekly", "outside", "daily", "inside")) #### outside
predictor(q1, c("give", "eat", "die", "sleep")) # die
predictor(q2, c("horticultural", "financial", "marital", "spiritual")) # marital
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
predictor(q2, c("horticultural", "financial", "marital", "spiritual")) # marital
predictor(q3, c("decade", "morning", "weekend", "month")) # weekend
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
freq_total <= as.numeric(sqldf("select sum(freq) from [dt.search.result]"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
a10 <- predictor(q10, c("movies", "novels", "stories", "pictures")) # movies
a1 <- predictor(q1, c("give", "eat", "die", "sleep")) # die a2 <- predictor(q2, c("horticultural", "financial", "marital", "spiritual")) # marital a3 <- predictor(q3, c("decade", "morning", "weekend", "month")) # weekend a4 <- predictor(q4, c("hunger", "happiness", "stress", "sleepiness")) ####### stress a5 <- predictor(q5, c("minute", "picture", "walk", "look")) #picture a6 <- predictor(q6, c("case", "account", "incident", "matter")) # not case a7 <- predictor(q7, c("toe", "hand", "finger", "arm")) ##### hand a8 <- predictor(q8, c("center", "side", "top", "middle")) #### top a9 <- predictor(q9, c("weekly", "outside", "daily", "inside")) #### outside a10 <- predictor(q10, c("movies", "novels", "stories", "pictures")) # movies
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
a10 <- predictor(q10, c("movies", "novels", "stories", "pictures")) # movies
a10 <- predictor(q10) # movies
data.stringified <- clean_text(data.stringified)
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
data.stringified
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_3__data_clean.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__rcorpus.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
a3 <- predictor(q3, c("decade", "morning", "weekend", "month")) # weekend
a4 <- predictor(q4, c("hunger", "happiness", "stress", "sleepiness")) ####### stress
a5 <- predictor(q5, c("minute", "picture", "walk", "look")) #picture
a6 <- predictor(q6, c("case", "account", "incident", "matter")) # not case
a7 <- predictor(q7, c("toe", "hand", "finger", "arm")) ##### hand
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
a1 <- predictor(q1, c("give", "eat", "die", "sleep")) # die
a2 <- predictor(q2, c("horticultural", "financial", "marital", "spiritual")) # marital
a4 <- predictor(q4, c("hunger", "happiness", "stress", "sleepiness")) ####### stress
a6 <- predictor(q6, c("case", "account", "incident", "matter")) # not case
a8 <- predictor(q8, c("center", "side", "top", "middle")) #### top
a10 <- predictor(q10, c("movies", "novels", "stories", "pictures")) # movies
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
q4 <- "Talking to your mom has the same effect as a hug and helps reduce your"
strategies.stupid_back_off(a10)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
strategies.stupid_back_off(a10)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
strategies.stupid_back_off(a10)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
a10 <- predictor("it was") # movies
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
a10 <- predictor("it was") # movies
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
a10 <- predictor("it was") # movies
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
a10 <- predictor("it was") # movies
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
a10 <- predictor("it was") # movies
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
a10 <- predictor("it was") # movies
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
a10 <- predictor("it was") # movies
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
a10 <- predictor("it was") # movies
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
a10 <- predictor("it was") # movies
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
a10 <- predictor("it was") # movies
strategy_stupid_back_off(a10)
pred <- predictor("it was") # movies
freq_total_5 <- sqldf("select sum(freq) from pred where ngram = 5")[1]
pred <- predictor("it was") # movies
freq_total_5 <- sqldf("select sum(freq) from predicted where ngram = 5")[1]
freq_total_5 <- sqldf("select sum(freq) from pred where ngram = 5")
freq_total_5 <- unlist(sqldf("select sum(freq) from pred where ngram = 5"))
sqldf("select sum(freq) from pred where ngram = 5")
sqldf("select sum(freq) from pred where ngram = '5'")
pred <- as.data.table(pred)
freq_total_5 <- unlist(sqldf("select sum(freq) from pred where ngram = '5'"))
freq_total_5 <- unlist(sqldf("select sum(freq) from pred where ngram = 5"))
freq_total_5 <- unlist(sqldf("select sum(freq) from pred where ngram = 5")) freq_total_4 <- sqldf("select sum(freq) from pred where ngram = 4") freq_total_3 <- sqldf("select sum(freq) from pred where ngram = 3") freq_total_2 <- sqldf("select sum(freq) from pred where ngram = 2")
(sqldf("select sum(freq) from pred where ngram = 5"))
pred$ngram <- as.numeric(pred$ngram)
freq_total_5 <- (sqldf("select sum(freq) from pred where ngram = 5"))
sqldf("select sum(freq) from pred where ngram = 5")
freq_total_5 <- (sqldf("select freq from pred where ngram = 5"))
class(pred)
freq_total_5 <- (sqldf("select sum(freq) from pred where ngram = 5"))
pred$freq <- as.numeric(pred$freq)
freq_total_5 <- (sqldf("select sum(freq) from pred where ngram = 5"))
pred$word <- as.character(pred$word)
pred$predicted <- as.character(pred$predicted)
freq_total_5 <- (sqldf("select sum(freq) from pred where ngram = 5"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
pred <- predictor("it was") # movies
pred
rm(pred)
pred <- predictor("it was") # movies
rm(pred)
pred <- predictor("it was") # movies
strategy_stupid_back_off(pred)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
strategy_stupid_back_off(pred)
pred
pred <- predictor("it was") # movies
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
pred <- predictor("it was") # movies
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
pred <- predictor("it was") # movies
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
pred <- predictor("it was") # movies
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
pred <- predictor("it was") # movies
strategy_stupid_back_off(pred)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
pred <- predictor("it was") # movies
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
pred <- predictor("it was") # movies
strategy_stupid_back_off(pred)
pred <- predictor("it was") # movies
sqldf("select * from n1 where word = 'was'")
sqldf("select * from n1 where word = 'see'")
sqldf("select * from n1 where word = 'year'")
pred <- predictor("last year") 
strategy_stupid_back_off(pred)
pred$ngram <- as.numeric(pred$ngram) pred$freq <- as.numeric(pred$freq) pred$word <- as.character(pred$word) pred$predicted <- as.character(pred$predicted)
freq_total_5 <- (sqldf("select sum(freq) from pred where ngram = 5"))
freq_total_4 <- sqldf("select sum(freq) from pred where ngram = 4")
freq_total_5
freq_total_2
freq_total_5 <- (sqldf("select sum(freq) from pred where ngram = 5")) freq_total_4 <- sqldf("select sum(freq) from pred where ngram = 4") freq_total_3 <- sqldf("select sum(freq) from pred where ngram = 3") freq_total_2 <- sqldf("select sum(freq) from pred where ngram = 2") freq_total_1 <- sqldf("select sum(freq) from pred where ngram = 1")
freq_total_1
freq_total_2
pred$ngram <- as.numeric(pred$ngram) pred$freq <- as.numeric(pred$freq) pred$word <- as.character(pred$word) pred$predicted <- as.character(pred$predicted) freq_total_5 <- (sqldf("select sum(freq) from pred where ngram = 5")) freq_total_4 <- sqldf("select sum(freq) from pred where ngram = 4") freq_total_3 <- sqldf("select sum(freq) from pred where ngram = 3") freq_total_2 <- sqldf("select sum(freq) from pred where ngram = 2") freq_total_1 <- sqldf("select sum(freq) from pred where ngram = 1") for (i in 1:nrow(pred)) {     if (pred$ngram == 5) {         pred$score[i] = pred$freq[i] / freq_total_4     } else if (pred$ngram == 4) {         pred$score[i] = 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram == 3) {         pred$score[i] = 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram == 2) {         pred$score[i] = 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     } } pred
q4 <- "Talking to your mom has the same effect as a hug and helps reduce your"
pred <- predictor("Talking to your mom has the same effect as a hug and helps reduce your") 
strategy_stupid_back_off(pred)
pred$ngram <- as.numeric(pred$ngram) pred$freq <- as.numeric(pred$freq) pred$word <- as.character(pred$word) pred$predicted <- as.character(pred$predicted)
freq_total_5 <- (sqldf("select sum(freq) from pred where ngram = 5"))
freq_total_4 <- sqldf("select sum(freq) from pred where ngram = 4") freq_total_3 <- sqldf("select sum(freq) from pred where ngram = 3") freq_total_2 <- sqldf("select sum(freq) from pred where ngram = 2") freq_total_1 <- sqldf("select sum(freq) from pred where ngram = 1")
for (i in 1:nrow(pred)) {     if (pred$ngram == 5) {         pred$score[i] = pred$freq[i] / freq_total_4     } else if (pred$ngram == 4) {         pred$score[i] = 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram == 3) {         pred$score[i] = 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram == 2) {         pred$score[i] = 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     } }
for (i in 1:nrow(pred)) {     if (pred$ngram[i] == 5) {         pred$score[i] = pred$freq[i] / freq_total_4     } else if (pred$ngram[i] == 4) {         pred$score[i] = 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram[i] == 3) {         pred$score[i] = 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram[i] == 2) {         pred$score[i] = 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     } }
for (i in 1:nrow(pred)) {     if (pred$ngram[i] = 5) {         pred$score[i] = pred$freq[i] / freq_total_4     } else if (pred$ngram[i] == 4) {         pred$score[i] = 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram[i] == 3) {         pred$score[i] = 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram[i] == 2) {         pred$score[i] = 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     } } pred
for (i in 1:nrow(pred)) {     if (pred$ngram[i] == 5) {         pred$score[i] == pred$freq[i] / freq_total_4     } else if (pred$ngram[i] == 4) {         pred$score[i] == 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram[i] == 3) {         pred$score[i] == 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram[i] == 2) {         pred$score[i] == 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     } }
for (i in 1:nrow(pred)) {     print(pred$ngram[i])     if (pred$ngram[i] == 5) {         pred$score[i] == pred$freq[i] / freq_total_4     } else if (pred$ngram[i] == 4) {         pred$score[i] == 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram[i] == 3) {         pred$score[i] == 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram[i] == 2) {         pred$score[i] == 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     } }
pred
pred <- predictor("protein g carbohydr g") 
pred$ngram <- as.numeric(pred$ngram) pred$freq <- as.numeric(pred$freq) pred$word <- as.character(pred$word) pred$predicted <- as.character(pred$predicted) freq_total_5 <- (sqldf("select sum(freq) from pred where ngram = 5")) freq_total_4 <- sqldf("select sum(freq) from pred where ngram = 4") freq_total_3 <- sqldf("select sum(freq) from pred where ngram = 3") freq_total_2 <- sqldf("select sum(freq) from pred where ngram = 2") freq_total_1 <- sqldf("select sum(freq) from pred where ngram = 1")
for (i in 1:nrow(pred)) {     print(pred$ngram[i])     if (pred$ngram[i] == 5) {         pred$score[i] == pred$freq[i] / freq_total_4     } else if (pred$ngram[i] == 4) {         pred$score[i] == 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram[i] == 3) {         pred$score[i] == 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram[i] == 2) {         pred$score[i] == 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     } }
for (i in 1:nrow(pred)-1) {     print(pred$ngram[i])     if (pred$ngram[i] == 5) {         pred$score[i] == pred$freq[i] / freq_total_4     } else if (pred$ngram[i] == 4) {         pred$score[i] == 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram[i] == 3) {         pred$score[i] == 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram[i] == 2) {         pred$score[i] == 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     } }
pred 
freq_total_1
freq_total_5
freq_total_5 <- (sqldf("select sum(freq) from pred where ngram = 5")) freq_total_4 <- sqldf("select sum(freq) from pred where ngram = 4") freq_total_3 <- sqldf("select sum(freq) from pred where ngram = 3") freq_total_2 <- sqldf("select sum(freq) from pred where ngram = 2") freq_total_1 <- sqldf("select sum(freq) from pred where ngram = 1") for (i in 1:nrow(pred)-1) {     print(pred$ngram[i])     if (pred$ngram[i] == 5) {         pred$score[i] == pred$freq[i] / freq_total_4     } else if (pred$ngram[i] == 4) {         pred$score[i] == 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram[i] == 3) {         pred$score[i] == 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram[i] == 2) {         pred$score[i] == 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     } } pred 
pred$ngram[1]
pred$ngram[2]
for (i in 1:nrow(pred)) {     print(pred$ngram[i])     if (pred$ngram[i] == 5) {         pred$score[i] == pred$freq[i] / freq_total_4     } else if (pred$ngram[i] == 4) {         pred$score[i] == 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram[i] == 3) {         pred$score[i] == 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram[i] == 2) {         pred$score[i] == 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     }     next }
for (i in 1:nrow(pred)) {     print(pred$ngram[i])     #if (pred$ngram[i] == 5) {         #pred$score[i] == pred$freq[i] / freq_total_4     #} else if (pred$ngram[i] == 4) {         #pred$score[i] == 0.4 * pred$freq[i] / freq_total_3     #} else if (pred$ngram[i] == 3) {         #pred$score[i] == 0.4 * 0.4 * pred$freq[i] / freq_total_2     #} else if (pred$ngram[i] == 2) {         #pred$score[i] == 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     #}     next } pred 
pred$score <- c()
for (i in 1:nrow(pred)) {     print(pred$ngram[i])     if (pred$ngram[i] == 5) {         pred$score[i] == pred$freq[i] / freq_total_4     } else if (pred$ngram[i] == 4) {         pred$score[i] == 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram[i] == 3) {         pred$score[i] == 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram[i] == 2) {         pred$score[i] == 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     }     next } pred 
pred$score <- c() for (i in 1:nrow(pred)) {     print(pred$ngram[i])     if (pred$ngram[i] == 5) {         pred$score[i] == pred$freq[i] / freq_total_4     } else if (pred$ngram[i] == 4) {         pred$score[i] == 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram[i] == 3) {         pred$score[i] == 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram[i] == 2) {         pred$score[i] == 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     }     next } pred 
pred$score <- c()
for (i in 1:nrow(pred)) {     print(pred$ngram[i])     if (pred$ngram[i] == 5) {         pred$score[i] == pred$freq[i] / freq_total_4     } else if (pred$ngram[i] == 4) {         pred$score[i] == 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram[i] == 3) {         pred$score[i] == 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram[i] == 2) {         pred$score[i] == 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     }     next }
for (i in 1:nrow(pred)) {     print(pred$ngram[i])     if (pred$ngram[i] == 5) {         print("55555")         pred$score[i] == pred$freq[i] / freq_total_4     } else if (pred$ngram[i] == 4) {         print("4444")         pred$score[i] == 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram[i] == 3) {         pred$score[i] == 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram[i] == 2) {         pred$score[i] == 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     }     next }
for (i in 1:nrow(pred)) {     print(pred$ngram[i])     if (pred$ngram[i] == 5) {         print(pred$freq[i])         pred$score[i] == pred$freq[i] / freq_total_4     } else if (pred$ngram[i] == 4) {         print("4444")         pred$score[i] == 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram[i] == 3) {         pred$score[i] == 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram[i] == 2) {         pred$score[i] == 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     }     next }
i <- nrow(pred) while (i > 1) {     print(pred$ngram[i])     if (pred$ngram[i] == 5) {         print(pred$freq[i])         pred$score[i] == pred$freq[i] / freq_total_4     } else if (pred$ngram[i] == 4) {         print("4444")         pred$score[i] == 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram[i] == 3) {         pred$score[i] == 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram[i] == 2) {         pred$score[i] == 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     } }
i <- nrow(pred) while (i > 1) {     print(pred$ngram[i])     if (pred$ngram[i] == 5) {         print(pred$freq[i])         pred$score[i] == pred$freq[i] / freq_total_4     } else if (pred$ngram[i] == 4) {         print("4444")         pred$score[i] == 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram[i] == 3) {         pred$score[i] == 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram[i] == 2) {         pred$score[i] == 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     }     i <- i-1 }
i <- nrow(pred) while (i > 1) {     print(pred$ngram[i])     if (pred$ngram[i] == 5) {         print(pred$freq[i])       #  pred$score[i] == pred$freq[i] / freq_total_4     } else if (pred$ngram[i] == 4) {         #pred$score[i] == 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram[i] == 3) {         # pred$score[i] == 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram[i] == 2) {         # pred$score[i] == 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     }     i <- i-1 }
i <- nrow(pred) while (i > 1) {     print(pred$ngram[i])     if (pred$ngram[i] == 5) {         print(pred$freq[i])       #  pred$score[i] == pred$freq[i] / freq_total_4     } else if (pred$ngram[i] == 4) {         #pred$score[i] == 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram[i] == 3) {         # pred$score[i] == 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram[i] == 2) {          pred$score[i] == 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     }     i <- i-1 }
i <- nrow(pred) while (i > 1) {     print(pred$ngram[i])     if (pred$ngram[i] == 5) {         print(pred$freq[i])        score <- pred$freq[i] / freq_total_4     } else if (pred$ngram[i] == 4) {         score <- 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram[i] == 3) {         score <- 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram[i] == 2) {          pred$score[i] == 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     }     pred$score[i] <- score     i <- i-1 }
i <- nrow(pred) while (i > 1) {     print(pred$ngram[i])     if (pred$ngram[i] == 5) {        score <- pred$freq[i] / freq_total_4     } else if (pred$ngram[i] == 4) {         score <- 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram[i] == 3) {         score <- 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram[i] == 2) {         score[i] == 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     }     print(score)    # pred$score[i] <- score     i <- i-1 }
i <- nrow(pred) score <- 1 while (i > 1) {     print(pred$ngram[i])     if (pred$ngram[i] == 5) {        score <- pred$freq[i] / freq_total_4     } else if (pred$ngram[i] == 4) {         score <- 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram[i] == 3) {         score <- 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram[i] == 2) {         score[i] == 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     }     print(score)    # pred$score[i] <- score     i <- i-1 }
i <- nrow(pred) score <- 1 while (i > 1) {     print(pred$ngram[i])     if (pred$ngram[i] == 5) {        score <- pred$freq[i] / freq_total_4     } else if (pred$ngram[i] == 4) {         score <- 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram[i] == 3) {         score <- 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram[i] == 2) {         score[i] == 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     }     print(score)     pred$score[i] <- score     i <- i-1 }
i <- nrow(pred) score <- 1 while (i > 1) {     print(pred$ngram[i])     if (pred$ngram[i] == 5) {        score <- pred$freq[i] / freq_total_4     } else if (pred$ngram[i] == 4) {         score <- 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram[i] == 3) {         score <- 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram[i] == 2) {         score <- 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     }     print(score)     pred$score[i] <- score     i <- i-1 }
pred 
i <- nrow(pred) score <- 1 while (i > 0) {     print(pred$ngram[i])     if (pred$ngram[i] == 5) {        score <- pred$freq[i] / freq_total_4     } else if (pred$ngram[i] == 4) {         score <- 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram[i] == 3) {         score <- 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram[i] == 2) {         score <- 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     }     print(score)     pred$score[i] <- score     i <- i-1 } pred 
pred <- predictor("protein g carbohydr") 
pred$ngram <- as.numeric(pred$ngram) pred$freq <- as.numeric(pred$freq) pred$word <- as.character(pred$word) pred$predicted <- as.character(pred$predicted) freq_total_5 <- (sqldf("select sum(freq) from pred where ngram = 5")) freq_total_4 <- sqldf("select sum(freq) from pred where ngram = 4") freq_total_3 <- sqldf("select sum(freq) from pred where ngram = 3") freq_total_2 <- sqldf("select sum(freq) from pred where ngram = 2") freq_total_1 <- sqldf("select sum(freq) from pred where ngram = 1")
i <- nrow(pred)
score <- 1
while (i > 0) {     print(pred$ngram[i])     if (pred$ngram[i] == 5) {        score <- pred$freq[i] / freq_total_4     } else if (pred$ngram[i] == 4) {         score <- 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram[i] == 3) {         score <- 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram[i] == 2) {         score <- 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     }     print(score)     pred$score[i] <- score     i <- i-1 }
pred 
i <- nrow(pred) score <- 1 while (i > 0) {     if (pred$ngram[i] == 5) {        score <- pred$freq[i] / freq_total_4     } else if (pred$ngram[i] == 4) {         score <- 0.4 * pred$freq[i] / freq_total_3     } else if (pred$ngram[i] == 3) {         score <- 0.4 * 0.4 * pred$freq[i] / freq_total_2     } else if (pred$ngram[i] == 2) {         score <- 0.4 * 0.4 * 0.4 * pred$freq[i] / freq_total_1     }     else if (pred$ngram[i] == 1) {         score <- 0     }     pred$score[i] <- score     i <- i-1 }
pred 
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
pred <- predictor("protein g carbohydr") 
strategy_stupid_back_off(pred)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
a10 <- predictor(q10, c("movies", "novels", "stories", "pictures")) # movies
a10
pred <- predictor("nice to") 
pred
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
pred <- predictor("I dont") 
pred
source("C:/dev/r-course/10-capstone/project_2__data_retrieval.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_3__data_clean.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
source("C:/dev/r-course/10-capstone/project_3__data_clean.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__rcorpus.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
a9 <- predictor(q9, c("weekly", "outside", "daily", "inside")) #### outside a10 <- predictor(q10, c("movies", "novels", "stories", "pictures")) # movies
pred <- predictor("from playing") 
pred
dt.search.result <- colnames(c("ngram", "word", "freq", "predicted"))
dt.search.result <- colnames(c("ngram", "word", "freq", "predicted"))
    setkey(dt.search.result, freq)
source("C:/dev/r-course/10-capstone/project_4__rcorpus.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
q9 <- "bruises from playing"
a9 <- predictor(q9, c("weekly", "outside", "daily", "inside")) #### outside
q10 <- "I like how the same people are in almost all of Adam Sandler's"
a10 <- predictor(q10, c("movies", "novels", "stories", "pictures")) # movies
pred <- predictor("from playing")  pred
pred <- predictor("best thing") 
pred
require(digest)
require(stringi)
require(data.table)
################################################################################################
#
# 01. Loading of benchmark data sets
#
################################################################################################
# 01b. Get text from randomly selected tweets
################################################################################################
tweets <- readLines('data/tweets.txt', encoding = 'UTF-8')
# verify checksum of loaded lines
digest(paste0(tweets, collapse = '||'), 
       algo='sha256', 
       serialize=F)==
    "7fa3bf921c393fe7009bc60971b2bb8396414e7602bb4f409bed78c7192c30f4"
tweets <- readLines('data/tweets.txt', encoding = 'UTF-8')
suppressMessages(setwd("c:/dev/r-course/10-capstone/dsci-benchmark-master"))
tweets <- readLines('data/tweets.txt', encoding = 'UTF-8')
tweets <- read_file('data/tweets.txt', encoding = 'UTF-8')
tweets <- read_file('data/tweets.txt')
# verify checksum of loaded lines
digest(paste0(tweets, collapse = '||'), 
       algo='sha256', 
       serialize=F)==
    "7fa3bf921c393fe7009bc60971b2bb8396414e7602bb4f409bed78c7192c30f4"
blogs <- read_file('data/blogs.txt')
# verify checksum of loaded lines
digest(paste0(blogs, collapse = '||'), 
       algo='sha256', 
       serialize=F)==
    "14b3c593e543eb8b2932cf00b646ed653e336897a03c82098b725e6e1f9b7aa2"
split.sentence <- compiler::cmpfun(function(line) {
    require(stringi)
    # append a space to the sentence (to make sure we always create one result with only the 
    # last word missing)
    sent <- paste0(line, ' ')
    sep <- stri_locate_all_regex(line, 
                                 pattern = '[^\\w\'@#\u2018\u2019\u201b]+', 
                                 omit_empty=T, 
                                 case_insensitive=T)[[1]]
    sapply(seq_len(nrow(sep)), 
           function(i) {
               c(sentence=ifelse(i>1, substr(line, 1, sep[i-1,2]), ''), 
                    nextWord=tolower(substr(line, max(sep[i-1,2]+1, 1), min(nchar(line), sep[i,1]-1)))
               )
               })
}, options=list(optimize=3))
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
predictor.benchmark  <- function(vec_chars) {     data <- paste(vec_chars, collapse = TRUE)     predictor(data) }
benchmark(predictor.benchmark, 
          # additional parameters to be passed to the prediction function can be inserted here
          sent.list = list('tweets' = tweets, 
                           'blogs' = blogs), 
          ext.output = T)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
predictor.benchmark(c('the', 'on', 'a'))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
stringi::stri_join(c('the', 'on', 'a'))
stringi::stri_join(c('the', 'on', 'a'), collapse = " ")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
tweets <- read_file('data/tweets.txt')
blogs <- read_file('data/blogs.txt')
benchmark(predictor.benchmark, 
          # additional parameters to be passed to the prediction function can be inserted here
          sent.list = list('tweets' = tweets, 
                           'blogs' = blogs), 
          ext.output = T)
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
benchmark(predictor,
          # additional parameters to be passed to the prediction function can be inserted here
          sent.list = list('tweets' = tweets, 
                           'blogs' = blogs), 
          ext.output = T)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
################################################################################################
benchmark(predictor.benchmark,
          # additional parameters to be passed to the prediction function can be inserted here
          sent.list = list('tweets' = tweets, 
                           'blogs' = blogs), 
          ext.output = T)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
sqldf("select * from n1 where word = 'coming' order by freq desc limit 5 ")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
sqldf("select * from n1 where word = 'is' order by freq desc limit 5 ")
sqldf("select * from n5 where word like 'record store day is%'  order by freq desc limit 5  ")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
sqldf("select * from n1 where word = 'is' order by freq desc limit 5 ")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
    if (nrow(pred) == 0)stop("no results")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
default_words <- c('the', 'on', 'a')
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
dt.lookup <- as.data.table()
dt.lookup <- colnames(c("word", "freq"))
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
require(data.table)
setkey(dt.lookup, "word")
dt.lookup <- as.data.table(dt.lookup)
setkey(dt.lookup, "word")
dt.lookup <- colnames(c("word", "freq"))
dt.lookup <- colnames(c("word", "freq")) dt.lookup <- as.data.table(dt.lookup) setkey(dt.lookup, "word")
setkey(dt.lookup, word)
dt.lookup <- colnames(c("word", "freq"))
dt.lookup <- as.data.table(dt.lookup)
setkey(dt.lookup, word)
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
sqldf("create index idx_freq on [dt.search.result](freq)")
    sqldf("create index idx_freq on dt.search.result(freq)")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
  sqldf("create index idx_word on dt.search.result(word)")
sqldf("create index idx_word on [dt.search.result](word)")
sqldf("create index idx_word on [dt.search.result].(word)")
sqldf("create index idx_freq on [dt.search.result](freq)")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
tweets <- sample(tweets,.1) blogs <- sample(blogs, .1) flog.threshold(DEBUG)
################################################################################################ benchmark(predict.baseline,           # additional parameters to be passed to the prediction function can be inserted here           sent.list = list('tweets' = tweets,                             'blogs' = blogs),            ext.output = T)
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
tweets <- sample(tweets,.8) blogs <- sample(blogs, .8)
tweets <- small_sample(tweets,.8) blogs <- small_sample(blogs, .8) flog.threshold(DEBUG)
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_3__data_clean.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__rcorpus.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_1__setup.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_2__data_retrieval.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_2__data_retrieval.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
a6 <- predictor(q6, c("case", "account", "incident", "matter")) # not case
a7 <- predictor(q7, c("toe", "hand", "finger", "arm")) ##### hand
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
a2 <- predictor(q2, c("horticultural", "financial", "marital", "spiritual")) # marital
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.tests.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
p_load("DBI")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/predictor.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/include.r", echo = TRUE, encoding = "utf-8")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/include.r", encoding = "utf-8")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/dsci-benchmark-master/benchmark.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__rcorpus.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__rcorpus.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__rcorpus.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_4__rcorpus.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/10-capstone/project_0_run.r", echo = TRUE, encoding = "Windows-1252")
