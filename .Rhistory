ggplot(samples, aes(x = mean, fill = mean)) +     geom_histogram(bins = 10, colour = "black", fill = "white") +     geom_density(alpha = .2, fill = "#FF6666") + # Overlay with transparent density plot geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 2) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 2) + scale_colour_manual(name = "group", values = c("r" = "red", "b" = "blue"), labels = c("b" = "blue values", "r" = "red values")) +   scale_fill_manual(name = "group", values = c("r" = "red", "b" = "blue"), labels = c("b" = "blue values", "r" = "red values")) + labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") + labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean, fill = mean)) +     geom_histogram(bins = 10, colour = "black", fill = "white") +     geom_density(alpha = .2, fill = "#FF6666") + # Overlay with transparent density plot     geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot2.histogram(data, xName = NULL, groupName = NULL,         position = c("identity", "stack", "dodge"),         addMeanLine = FALSE, meanLineColor = NULL,         meanLineType = "dashed", meanLineSize = 1,         addDensityCurve = FALSE, densityFill = "#FF6666",         densityAlpha = 0.2,         densityLineType = "solid", densityLineColor = "#2F2F2F",         scale = c("frequency", "density"),         groupColors = NULL, brewerPalette = NULL, ...)
ggplot(samples, aes(x = mean, fill = mean)) +     geom_histogram(bins = 10, colour = "black", fill = "white",show.legend = TRUE) +     geom_density(alpha = .2, fill = "#FF6666") + # Overlay with transparent density plot     geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean, fill = mean)) +     geom_histogram(bins = 10, colour = "black", fill = "white", show.legend = TRUE) +     geom_density(alpha = .2, fill = "#FF6666") + # Overlay with transparent density plot geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency") + scale_colour_manual("Legend title", values = c("black", "red"))
ggplot(samples, aes(x = mean, fill = mean)) +     geom_histogram(bins = 10, colour = "black", fill = "white", show.legend = TRUE) +     geom_density(alpha = .2, fill = "#FF6666") +     geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     stat_function(aes(colour = "Normal"), fun = dnorm, args = list(mean = 0.3, sd = 1)) +     scale_colour_manual("Legend title", values = c("black", "red")) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean, fill = mean)) +     geom_histogram(bins = 10, colour = "black", fill = "white", show.legend = TRUE) +     geom_density(alpha = .2, fill = "#FF6666") +     geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     scale_colour_manual(name = "group", values = c("r" = "red", "b" = "blue"), labels = c("b" = "blue values", "r" = "red values")) +     scale_fill_manual(name = "group", values = c("r" = "red", "b" = "blue"), labels = c("b" = "blue values", "r" = "red values"))     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean, fill = mean)) +     geom_histogram(bins = 10, colour = "black", fill = "white", show.legend = TRUE) +     geom_density(alpha = .2, fill = "#FF6666") +     geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     scale_colour_manual(name = "group", values = c("r" = "red", "b" = "blue"), labels = c("b" = "blue values", "r" = "red values")) +     scale_fill_manual(name = "group", values = c("r" = "red", "b" = "blue"), labels = c("b" = "blue values", "r" = "red values")) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean, fill = mean)) +     geom_histogram(bins = 10, colour = "black", fill = "white", show.legend = TRUE) +     geom_density(alpha = .2, fill = "#FF6666") +     geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     scale_color_manual(labels = c("T999", "T888"), values = c("blue", "red")) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean, fill = mean)) +     geom_histogram(bins = 10, colour = "black", fill = "white", show.legend = TRUE) +     geom_density(alpha = .2, fill = "#FF6666") +     geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     scale_color_manual(name = "statistics", values = c(median = "blue", mean = "red")) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean, fill = mean)) +     geom_histogram(bins = 10, colour = "black", fill = "white", show.legend = TRUE) +     geom_density(alpha = .2, fill = "#FF6666") +     geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     scale_color_manual(name = "statistics", values = c(median = "blue", mean = "red")) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean, fill = mean)) +     geom_histogram(bins = 10, colour = "black", fill = "white", show.legend = TRUE) +     geom_density(alpha = .2, fill = "#FF6666") +     geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     scale_color_manual(name = "statistics", values = c(median = "blue", mean = "red")) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean, fill = mean)) +     geom_histogram(bins = 10, colour = "black", fill = "white", show.legend = TRUE) +     geom_density(alpha = .2, fill = "#FF6666") +     geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     scale_color_manual(name = "statistics", values = c(median = "blue", mean = "red")) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean, fill = mean)) +     geom_histogram(colour = "black", fill = "white") +     geom_density(alpha = .2, fill = "#FF6666") +     geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     scale_color_manual(name = "statistics", values = c(median = "blue", mean = "red")) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean, fill = mean)) +     geom_histogram(binwidth=20, colour = "black", fill = "white") +     geom_density(alpha = .2, fill = "#FF6666") +     geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     scale_color_manual(name = "statistics", values = c(median = "blue", mean = "red")) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean, fill = mean)) +     geom_histogram(binwidth=30, colour = "black", fill = "white") +     geom_density(alpha = .2, fill = "#FF6666") +     geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     scale_color_manual(name = "statistics", values = c(median = "blue", mean = "red")) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean, fill = mean)) +     geom_histogram(colour = "black", fill = "white") +     geom_density(alpha = .2, fill = "#FF6666") +     geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     scale_color_manual(name = "statistics", values = c(median = "blue", mean = "red")) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean)) +     geom_histogram(colour = "black", fill = "white") +     geom_density(alpha = .2, fill = "#FF6666") +     geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     scale_color_manual(name = "statistics", values = c(median = "blue", mean = "red")) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean)) +     geom_histogram(colour = "black", fill =NA) +     geom_density(alpha = .2, fill = "#FF6666") +     geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     scale_color_manual(name = "statistics", values = c(median = "blue", mean = "red")) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean)) +     geom_histogram(colour = "black", fill = NA) +     geom_density(alpha = .2, fill = "#FF6666") +     geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     scale_color_manual(name = "Means", values = c(sample_mean = "red", theoretical_mean = "blue")) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean)) +     geom_histogram(colour = "black", fill = NA) +     geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     scale_color_manual(name = "Means", values = c(sample_mean = "red", theoretical_mean = "blue")) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean)) +     geom_histogram(binwidth=50, colour = "black", fill = NA) +     geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     scale_color_manual(name = "Means", values = c(sample_mean = "red", theoretical_mean = "blue")) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean)) +     geom_histogram(binwidth=15, colour = "black", fill = NA) +     geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     scale_color_manual(name = "Means", values = c(sample_mean = "red", theoretical_mean = "blue")) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean)) +     geom_histogram(binwidth=50, colour = "black", fill = NA) +     geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     scale_color_manual(name = "Means", values = c(sample_mean = "red", theoretical_mean = "blue")) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean)) +     geom_histogram(binwidth=20, colour = "black", fill = NA) +     geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     scale_color_manual(name = "Means", values = c(sample_mean = "red", theoretical_mean = "blue")) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean)) +     geom_histogram(bins=20, colour = "black", fill = NA) +     geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     scale_color_manual(name = "Means", values = c(sample_mean = "red", theoretical_mean = "blue")) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean)) +     geom_histogram(bins = 20, colour = "black", fill = NA) +     geom_density(alpha = .2, fill = "#FF6666") +     geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     scale_color_manual(name = "Means", values = c(sample_mean = "red", theoretical_mean = "blue")) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean)) +     geom_histogram(bins = 20, colour = "black", fill = NA) +     geom_density(alpha = .2, fill = "#FF6666") +     geom_vline(aes(xintercept = sample_mean), color = "sample_mean", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "theoretical_mean", linetype = "dotted", size = 1) +     scale_color_manual(name = "Means", values = c(sample_mean = "red", theoretical_mean = "blue")) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean)) +     geom_histogram(bins = 20, colour = "black", fill = NA) +     geom_density(alpha = .2, fill = "#FF6666") +     geom_vline(aes(xintercept = sample_mean), color = "sample_mean", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "theoretical_mean", linetype = "dotted", size = 1) +     scale_color_manual(name = "Means", values = c(sample_mean = "red", theoretical_mean = "blue")) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean)) +     geom_histogram(bins = 20, colour = "black", fill = NA) +     geom_density(alpha = .2, fill = "#FF6666") +     geom_vline(aes(xintercept = sample_mean), color = "red", linetype = "dashed", size = 1) +     geom_vline(aes(xintercept = theoretical_mean), color = "blue", linetype = "dotted", size = 1) +     scale_color_manual(name = "Means", values = c(sample_mean = "red", theoretical_mean = "blue")) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
source("C:/dev/r-course/5-statistical-inference/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment.R", echo = TRUE, encoding = "Windows-1252")
theoretical_variance <- ((1/lambda)^2)/size)
theoretical_variance <- ((1/lambda)^2/size)
theoretical_variance <- ((1/lambda)^2/size) sample_variance <- var(samples[, 1])
theoretical_sd <- (1 / lambda) / sqrt(size) theoretical_variance <- theoretical_sd^2
max(sample[,1])
max(samples[, 1])
ggplot(samples, aes(x = mean)) +     geom_histogram(bins = 20, boundary = -0.5, fill = NA, color = "black") +     geom_density(alpha = .2, fill = "#FF6666", show.legend = FALSE) +     labs(title = "Approximation to Normality") +     labs(x = "Sample means", y = "Frequency") +     stat_function(fun = dnorm, arg = list(mean = sample_mean, sd = sqrt(sample_variance)), colour = "yellow", size = 2)
ggplot(samples, aes(x = mean)) +     geom_histogram(bins = 20, boundary = -0.5, fill = NA, color = "black") +     geom_density(alpha = .2, fill = "#FF6666", show.legend = FALSE) +     stat_function(fun = dnorm, arg = list(mean = sample_mean, sd = sqrt(sample_variance)), colour = "yellow", size = 2)     labs(title = "Approximation to Normality") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean)) +     geom_histogram(bins = 20, boundary = -0.5, fill = NA, color = "black") +     geom_density(alpha = .2, fill = "#FF6666", show.legend = FALSE) +     stat_function(fun = dnorm, arg = list(mean = sample_mean, sd = sqrt(sample_variance)), colour = "yellow", size = 2) +     labs(title = "Approximation to Normality") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean)) +     geom_histogram(aes(y = ..density..), binwidth = 0.20) +     stat_function(fun = dnorm, arg = list(mean = sample_mean, sd = sd(sample_variance)))
ggplot(samples, aes(x = mean)) +     geom_histogram(aes(y = ..density..), binwidth = 0.20) +     stat_function(fun = dnorm, args = list(mean = sample_mean, sd = sd(sample_variance)))
ggplot(samples, aes(x = mean)) +     geom_histogram(bins = 20, boundary = -0.5, fill = NA, color = "black") +     geom_density(alpha = .2, fill = "#FF6666", show.legend = FALSE) +     stat_function(fun = dnorm, args = list(mean = sample_mean, sd = sqrt(sample_variance)), colour = "yellow", size = 2) +     labs(title = "Approximation to Normality") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean)) +     geom_histogram(bins = 20, boundary = -0.5, fill = NA, color = "black") +     geom_density(alpha = .2, fill = "#FF6666", show.legend = FALSE) +     stat_function(fun = dnorm, args = list(mean = mean, sd = sqrt(sample_variance)), colour = "yellow", size = 2) +     labs(title = "Approximation to Normality") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean)) +     geom_histogram(bins = 20, boundary = -0.5, fill = NA, color = "black") +     geom_density(alpha = .2, fill = "#FF6666", show.legend = FALSE) +     stat_function(fun = dnorm, args = list(mean = tmean, sd = sqrt(sample_variance)), colour = "yellow", size = 2) +     labs(title = "Approximation to Normality") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean)) +     geom_histogram(bins = 20, boundary = -0.5, fill = NA, color = "black") +     geom_density(alpha = .2, fill = "#FF6666", show.legend = FALSE) +     stat_function(fun = dnorm, args = list(sd = sqrt(sample_variance)), colour = "yellow", size = 2) +     labs(title = "Approximation to Normality") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean)) +     geom_histogram(bins = 20, boundary = -0.5, fill = NA, color = "black") +     geom_density(alpha = .2, fill = "#FF6666", show.legend = FALSE) +     stat_function(mapping = NULL, data = samples, geom = "path", position = "identity", fun = dnorm())     labs(title = "Approximation to Normality") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean)) +     geom_histogram(bins = 20, boundary = -0.5, fill = NA, color = "black") +     geom_density(alpha = .2, fill = "#FF6666", show.legend = FALSE) +     stat_function(mapping = NULL, data = samples, geom = "path", position = "identity", fun = dnorm())
ggplot(samples, aes(x = mean)) +     geom_histogram(bins = 20, boundary = -0.5, fill = NA, color = "black") +     geom_density(alpha = .2, fill = "#FF6666", show.legend = FALSE) +     stat_function(data = samples, geom = "path", position = "identity", fun = dnorm())
ggplot(samples, aes(x = mean)) +     geom_histogram(bins = 20, boundary = -0.5, fill = NA, color = "black") +     geom_density(alpha = .2, fill = "#FF6666", show.legend = FALSE) +     stat_function(data = samples, geom = "path", position = "identity", fun = dnorm)
g <- ggplot(samples, aes(x = mean)) + geom_histogram(aes(y = ..density..), color = "darkgreen", fill = "white") g <- g + geom_density(size = 2, color = "blue") g <- g + stat_function(fun = dnorm, arg = list(mean = mean, sd = sqrt(sample_variance)), colour = "yellow", size = 2) g
ggplot(samples, aes(x = mean)) +     geom_histogram(bins = 20, boundary = -0.5, fill = NA, color = "black") +     geom_density(alpha = .2, fill = "#FF6666", show.legend = FALSE) +     geom_vline(aes(xintercept = sample_mean, color = "sample_mean", linetype = "sample_mean", show.legend = FALSE)) +     geom_vline(aes(xintercept = theoretical_mean, color = "theoretical_mean", linetype = "theoretical_mean", show.legend = FALSE)) +     scale_colour_manual(name = "Units", values = c(sample_mean = "red", theoretical_mean = "blue")) +     scale_linetype_manual(name = "Units", values = c(sample_mean = "dashed", theoretical_mean = "dotted"), guide = FALSE) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency") +     stat_function(fun = dnorm, arg = list(mean = mean, sd = sqrt(sample_variance)), colour = "yellow", size = 2)
ggplot(samples, aes(x = mean)) +     geom_histogram(bins = 20, boundary = -0.5, fill = NA, color = "black") +     geom_density(alpha = .2, fill = "#FF6666", show.legend = FALSE) +     geom_vline(aes(xintercept = sample_mean, color = "sample_mean", linetype = "sample_mean", show.legend = FALSE)) +     geom_vline(aes(xintercept = theoretical_mean, color = "theoretical_mean", linetype = "theoretical_mean", show.legend = FALSE)) +     scale_colour_manual(name = "Units", values = c(sample_mean = "red", theoretical_mean = "blue")) +     scale_linetype_manual(name = "Units", values = c(sample_mean = "dashed", theoretical_mean = "dotted"), guide = FALSE) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency") +     stat_function(fun = dnorm, args = list(mean = mean, sd = sqrt(sample_variance)), colour = "yellow", size = 2)
ggplot(samples, aes(x = mean)) +     geom_histogram(bins = 20, boundary = -0.5, fill = NA, color = "black") +     geom_density(alpha = .2, fill = "#FF6666", show.legend = FALSE) +     stat_function(fun = dnorm, args = list(mean = mean, sd = sqrt(sample_variance)), colour = "yellow", size = 2)     geom_vline(aes(xintercept = sample_mean, color = "sample_mean", linetype = "sample_mean", show.legend = FALSE)) +     geom_vline(aes(xintercept = theoretical_mean, color = "theoretical_mean", linetype = "theoretical_mean", show.legend = FALSE)) +     scale_colour_manual(name = "Units", values = c(sample_mean = "red", theoretical_mean = "blue")) +     scale_linetype_manual(name = "Units", values = c(sample_mean = "dashed", theoretical_mean = "dotted"), guide = FALSE) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean)) +     geom_histogram(aes(y = ..density..), bins = 20, boundary = -0.5, fill = NA, color = "black") +     geom_density(alpha = .2, fill = "#FF6666", show.legend = FALSE) +     stat_function(fun = dnorm, args = list(mean = mean, sd = sqrt(sample_variance)), colour = "yellow", size = 2)     geom_vline(aes(xintercept = sample_mean, color = "sample_mean", linetype = "sample_mean", show.legend = FALSE)) +     geom_vline(aes(xintercept = theoretical_mean, color = "theoretical_mean", linetype = "theoretical_mean", show.legend = FALSE)) +     scale_colour_manual(name = "Units", values = c(sample_mean = "red", theoretical_mean = "blue")) +     scale_linetype_manual(name = "Units", values = c(sample_mean = "dashed", theoretical_mean = "dotted"), guide = FALSE) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
ggplot(samples, aes(x = mean)) +     geom_histogram(aes(y = ..density..), bins = 20, boundary = -0.5, fill = NA, color = "black") +     geom_density(alpha = .2, fill = "#FF6666", show.legend = FALSE) +     stat_function(fun = dnorm, args = list(mean = mean, sd = sqrt(sample_variance)), colour = "yellow", size = 2) +     labs(title = "Approximation to Normality - visual inspection of bell curve") +     labs(x = "Sample means", y = "Frequency")
source("C:/dev/r-course/5-statistical-inference/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment.R", echo = TRUE, encoding = "Windows-1252")
ggplot(samples, aes(x = mean)) +     geom_histogram(aes(y = ..density..), bins = 20, boundary = -0.5, fill = NA, color = "black") +     geom_density(alpha = .2, fill = "#FF6666", show.legend = FALSE) +     stat_function(fun = dnorm, args = list(mean = mean, sd = sqrt(sample_variance)), colour = "yellow", size = 2) +     labs(title = "Approximation to Normality - visual inspection of bell curve") +     labs(x = "Sample means", y = "Frequency")
source("C:/dev/r-course/5-statistical-inference/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment.R", echo = TRUE, encoding = "Windows-1252")
warnings()
ggplot(samples, aes(x = mean)) +     geom_histogram(bins = 20, boundary = -0.5, fill = NA, color = "black") +     geom_density(alpha = .2, fill = "#FF6666",show.legend = FALSE) +     geom_vline(aes(xintercept = sample_mean, color = "sample_mean", linetype = "sample_mean", show.legend = FALSE)) +     geom_vline(aes(xintercept = theoretical_mean, color = "theoretical_mean", linetype = "theoretical_mean", show.legend = FALSE)) +     scale_colour_manual(name = "Units", values = c(sample_mean = "red", theoretical_mean = "blue")) +     scale_linetype_manual(name = "Units", values = c(sample_mean = "dashed", theoretical_mean = "dotted"), guide = FALSE) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
theoretical_sd <- (1 / lambda) / sqrt(size) theoretical_variance <- theoretical_sd^2 sample_variance <- var(data)
theoretical_sd <- (1 / lambda) / sqrt(size)
theoretical_variance <- theoretical_sd^2
skewness(data)
kurtosis(data)
shapiro.test(data)
# Test 1 - skewness and kurtosis, they should be around (0,3) skewness(data) kurtosis(data) # Test 2 - Shapiro-Wilks test shapiro.test(data) # Test 3 - Kolmogorov-Smirnov test ks.test(x, "pnorm", mean(x), sqrt(var(x))) # Test 4 - Anderson-Darling test ad.test(x) # Test 5 - qq-plot: you should observe a good fit of the straight line qqnorm(x) qqline(x) # Test 6 - p-plot: you should observe a good fit of the straight line probplot(x, qdist = qnorm) # Test 7 - fitted normal density f.den <- function(t) dnorm(t, mean(x), sqrt(var(x))) curve(f.den, xlim = c(6, 14)) hist(x, prob = T, add = T)
shapiro.test(data)
ks.test(x, "pnorm", mean(x), sqrt(var(x)))
source("C:/dev/r-course/5-statistical-inference/assignment.R", echo = TRUE, encoding = "Windows-1252")
ks.test(data, "pnorm", mean(data), sqrt(var(data)))
ks.test(data, "pnorm", mean(data), sqrt(var(data)))
ad.test(data)
qqnorm(data)
qqline(data)
f.den <- function(t) dnorm(t, mean(data), sqrt(var(data)))
curve(f.den, xlim = c(6, 14))
hist(data, prob = T, add = T)
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
# Title: Part 2: Basic Inferential Data Analysis # Description: https://www.coursera.org/learn/statistical-inference/peer/3k8j5/statistical-inference-course-project ####setup rm(list = ls()) # clear vars setwd("C:\\dev\\r-course\\5-statistical-inference") #------ ####install missing packages and reference list.of.packages <- c("dplyr", "tidyr", "ggplot2", "knitr", "markdown", "moments", "nortest", "e1071") new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])] if (length(new.packages))     install.packages(new.packages) sapply(sapply(list.of.packages, library, character.only = TRUE, quietly = FALSE), require, character.only = TRUE, quietly = FALSE)
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
lambda <- 0.2   size <- 40   simulations <- 1000
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
samples <- data.frame(individual_mean = numeric(size))
replicate(simulations, mean(rexp(size, lambda)))
individual_sample <- rexp(size, lambda) # specific set simulation with 40 exponentials of lambda     samples[i, 1] <- mean(individual_sample)  }
for (i in 1:simulations) {     individual_sample <- rexp(size, lambda) # specific set simulation with 40 exponentials of lambda     samples[i, 1] <- mean(individual_sample)  }
theoretical_mean <- 1 / lambda data <- samples[, 1] sample_mean <- mean(data)
### plot samples with theoretical mean vs sample mean ggplot(samples, aes(x = individual_mean)) +     geom_histogram(bins = 20, boundary = -0.5, fill = NA, color = "black") +     geom_density(alpha = .2, fill = "#FF6666",show.legend = FALSE) +     geom_vline(aes(xintercept = sample_mean, color = "sample_mean", linetype = "sample_mean", show.legend = FALSE)) +     geom_vline(aes(xintercept = theoretical_mean, color = "theoretical_mean", linetype = "theoretical_mean", show.legend = FALSE)) +     scale_colour_manual(name = "Units", values = c(sample_mean = "red", theoretical_mean = "blue")) +     scale_linetype_manual(name = "Units", values = c(sample_mean = "dashed", theoretical_mean = "dotted"), guide = FALSE) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
### plot samples with theoretical mean vs sample mean ggplot(samples, aes(x = individual_mean)) +     geom_histogram(bins = 20, boundary = -0.5, fill = NA, color = "black") +     geom_density(alpha = .2, fill = "#FF6666",show.legend = FALSE) +     geom_vline(aes(xintercept = sample_mean, color = "sample_mean", linetype = "sample_mean", show.legend = FALSE)) +     geom_vline(aes(xintercept = theoretical_mean, color = "theoretical_mean", linetype = "theoretical_mean", show.legend = FALSE)) +     scale_colour_manual(name = "Units", values = c(sample_mean = "red", theoretical_mean = "blue")) +     scale_linetype_manual(name = "Units", values = c(sample_mean = "dashed", theoretical_mean = "dotted"), guide = FALSE) +     labs(title = "Theoretical vs sample mean of 40 exponentials over 1000 samples") +     labs(x = "Sample means", y = "Frequency")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
# Show that the distribution is approximately normal. # visually inspect bell curve ggplot(samples, aes(x = individual_mean)) +     geom_histogram(aes(y = ..density..), bins = 20, boundary = -0.5, fill = NA, color = "black") +     geom_density(alpha = .2, fill = "#FF6666", show.legend = FALSE) +     stat_function(fun = dnorm, args = list(mean = mean(data), sd = sqrt(sample_variance)), colour = "yellow", size = 2) +     labs(title = "Approximation to Normality - visual inspection of bell curve") +     labs(x = "Sample means", y = "Frequency")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_1.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
library(datasets) data(ToothGrowth) # Provide a basic summary of the data. summary(ToothGrowth)
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
summary(df)
overview <- sqldf(df, "select distinct tooth_length, Count(supplement_type) from tbl ")
overview <- sqldf(df, "select distinct tooth_length, Count(supplement_type) from tbl group by Count(supplement_type) ")
df <- data.frame(ToothGrowth)
setnames(df, c('len', 'supp', 'dose'), c('tooth_length', 'supplement_type', 'dose_mg_per_day'))
overview <- sqldf(df, "select distinct tooth_length, Count(supplement_type) from tbl group by Count(supplement_type) ")
overview <- sqldf(df, "select tooth_length, Count(supplement_type) from tbl group by tooth_length ")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
overview <- sqldf(df, "select len, count(supp) from tbl group by len")
overview <- sqldf("select len, count(supp) from tbl group by len")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
overview <- sqldf("select distinct tooth_length, Count(supplement_type) from tbl ")
overview <- sqldf("select distinct tooth_length, count(supplement_type) from tbl group by tooth_length")
overview <- sqldf("select tooth_length, count(supplement_type), count(dose_mg_per_day) from tbl group by tooth_length")
overview
a <- sqldf("select * from tbl where tooth_length = '4.2'")
table(tbl$supplement, tbl$dose)
head(tbl)
qplot(overview, binwidth = 1.0, geom = "histogram", xlab = "tooth_length", ylab = "Frequency",       y = ..density.., fill = I("white"), colour = I("black")) +   stat_density(geom = "line")
qplot(overview, aes(x = tooth_length, y = 1:5, group = variable, fill = variable)) +     geom_bar(stat = "identity", width = 0.5, position = "dodge") +     facet_grid(. ~ Year) + theme_bw() + theme(axis.text.x = element_text(angle = 90))
overview <- sqldf("select tooth_length, count(supplement) as total_supplements, count(dose) as total_dose from tbl group by tooth_length")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
qplot(overview, aes(x = tooth_length, y = 1:5, group = total_supplements, fill = total_supplements)) +     geom_bar(stat = "identity", width = 0.5, position = "dodge") +     facet_grid(. ~ Year) + theme_bw() + theme(axis.text.x = element_text(angle = 90))
qplot(overview, aes(x = tooth_length, y = 1:5, group = total_supplements, fill = total_supplements)) +     geom_bar(stat = "identity", width = 0.5, position = "dodge") +     facet_grid(. ~ total_dose) + theme_bw() + theme(axis.text.x = element_text(angle = 90))
overview <- sqldf("select tooth_length, count(supplement) as total_supplements, count(dose) as total_dose from tbl group by tooth_length") teeth_supplement <- sqldf("select tooth_length, count(supplement) as total_supplements as total_dose from tbl group by tooth_length") teeth_dose <- sqldf("select tooth_length, count(dose) as total_dose from tbl group by tooth_length") ggplot(teeth_supplement, aes(x, y)) + geom_line(aes(color = "total_supplements")) +   geom_line(data = teeth_dose, aes(color = "total_dose")) +   labs(color = "Legend text")
teeth_supplement <- sqldf("select tooth_length, count(supplement) as total_supplements from tbl group by tooth_length")
teeth_dose <- sqldf("select tooth_length, count(dose) as total_dose from tbl group by tooth_length")
ggplot(teeth_supplement, aes(x, y)) + geom_line(aes(color = "total_supplements")) +   geom_line(data = teeth_dose, aes(color = "total_dose")) +   labs(color = "Legend text")
ggplot(teeth_supplement, aes(total_supplements, total_dose)) + geom_line(aes(color = "total_supplements")) +   geom_line(data = teeth_dose, aes(color = "total_dose")) +   labs(color = "Legend text")
ggplot(teeth_supplement, aes(tooth_length, total_supplements)) + geom_line(aes(color = "total_supplements")) +   geom_line(data = teeth_dose, aes(color = "total_dose")) +   labs(color = "Legend text")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
autoplot(ts(cbind(teeth_supplement, teeth_dose), start = min(teeth_supplement$tooth_length), frequency = mean(teeth_supplement$tooth_length)), facets = FALSE)
autoplot(ts(cbind(teeth_supplement, teeth_dose), start = min(teeth_supplement$tooth_length)), facets = FALSE)
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
ggplot(teeth_supplement, aes(tooth_length, total_supplements)) + geom_line(aes(color = "total_supplements")) +   #geom_line(data = teeth_dose, aes(color = "total_dose")) +   labs(color = "Legend text")
ggplot(teeth_supplement, aes(tooth_length, 1:5)) + geom_line(aes(color = "total_supplements")) +   #geom_line(data = teeth_dose, aes(color = "total_dose")) +   labs(color = "Legend text")
ggplot(teeth_supplement, aes(tooth_length, 1)) + geom_line(aes(color = "total_supplements")) +   #geom_line(data = teeth_dose, aes(color = "total_dose")) +   labs(color = "Legend text")
ggplot(teeth_supplement, aes(tooth_length, total_supplements)) + geom_line(aes(color = "total_supplements")) +   geom_line(data = teeth_dose, aes(color = "total_dose")) +   labs(color = "Legend text")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
ggplot(teeth_supplement, aes(tooth_length)) + geom_line(data = teeth_supplement, aes(color = "total_supplements")) +   geom_line(data = teeth_dose, aes(color = "total_dose")) +   labs(color = "Legend text")
ggplot(teeth_supplement) + geom_line(data = teeth_supplement, aes(color = "total_supplements")) +   geom_line(data = teeth_dose, aes(color = "total_dose")) +   labs(color = "Legend text")
ggplot(teeth_supplement, aes(tooth_length, total_supplements)) + geom_line(data = teeth_dose, aes(color = "total_supplements")) +   geom_line(data = teeth_dose, aes(color = "total_dose")) +   labs(color = "Legend text")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
ggplot(teeth_supplement, aes(tooth_length, total_supplements)) + geom_line(data = teeth_supplement, aes(color = "total_supplements")) +   geom_line(data = teeth_dose, aes(color = "total_dose")) +   labs(color = "Legend text")
ggplot(teeth_supplement, aes(tooth_length, total_supplements)) + geom_line(data = teeth_supplement, aes(color = "Red")) +   geom_line(data = teeth_dose, aes(color = "Blue")) +   labs(color = "Legend text")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
ggplot(teeth_supplement, aes(tooth_length, total_supplements) + geom_line(data = teeth_supplement, aes(color = "total_supplements")) +   geom_line(data = teeth_dose, aes(color = "Blue")) +   labs(color = "Legend text"))
res <- lm(total_supplements ~ total_dose, data = overview) mp <- autoplot(res, ncol = 4) mp
res <- lm(total_supplements ~ tooth_length, data = teeth_supplement) mp <- autoplot(res, ncol = 4) mp
res <- lm(total_supplements ~ tooth_length, data = teeth_supplement) autoplot(res)
ggplot(overview, aes(total_supplements, ..count..)) + geom_bar(aes(fill = total_dose), position = "dodge")
ggplot(overview, aes(tooth_length, ..count..)) + geom_bar(aes(fill = total_dose), position = "dodge")
ggplot(overview, aes(tooth_length)) +   geom_line(aes(y = total_supplements, colour = "total_supplements")) +   geom_line(aes(y = total_dose, colour = "total_dose"))
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
overview <- sqldf("select tooth_length, count(supplement) as total_supplements, sum(dose) as total_dose, (count(supplement)*sum(dose)) as total  from tbl group by tooth_length order by  tooth_length")
ggplot(overview, aes(total)) +   geom_line(aes(y = total_supplements, colour = "total_supplements")) +   geom_line(aes(y = total_dose, colour = "total_dose")) +   labs(title = "Tooth length size b") +   labs(x = "Sample means", y = "Frequency")
library(datasets) data(ToothGrowth)
#cleanup tbl <- data.table(ToothGrowth) setnames(tbl, c('len', 'supp', 'dose'), c('tooth_length', 'supplement', 'dose'))
summary(tbl) head(tbl) table(tbl$supplement, tbl$dose)
team_oj <- sqldf("select tooth_length, supplement, dose from tbl where supplement = 'OJ'")
team_vc <- sqldf("select tooth_length, supplement, dose from tbl where supplement = 'VC'")
team_oj_total <- sqldf("select tooth_length, count(supplement), sum(dose) from team_oj group by tooth_length order by tooth_length")
team_vc_total <- sqldf("select tooth_length, count(supplement), sum(dose) from team_vc group by tooth_length order by tooth_length")
overview <- sqldf("select tooth_length, count(supplement), sum(dose) from tbl group by tooth_length order by tooth_length")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
ggplot(overview, aes(total_dose)) +   geom_line(aes(y = team_oj_total, colour = "total_dose")) +   geom_line(aes(y = team_vc_total, colour = "total_dose")) +   labs(title = "Tooth growth by supplement dose") +   labs(x = "Sample means", y = "Frequency")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
ggplot(overview, aes(x = total_dose, y = tooth_length)) +   geom_line(data = team_oj_total, aes(y = tooth_length, x = total_dose, colour = "team_oj_total")) +   geom_line(aes(y = team_vc_total, colour = "total_dose")) +   labs(title = "Tooth growth by supplement dose") +   labs(x = "Total dose", y = "Tooth growth")
ggplot(overview, aes(x = total_dose, y = tooth_length)) +   geom_line(data = team_oj_total, aes(y = tooth_length, x = total_dose, colour = "red")) +   geom_line(aes(y = team_vc_total, colour = "total_dose")) +   labs(title = "Tooth growth by supplement dose") +   labs(x = "Total dose", y = "Tooth growth")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
team_oj_total <- sqldf("select tooth_length, supplement count(supplement) as total_supplement, sum(dose) as total_dose from team_oj group by tooth_length,supplement order by tooth_length")
team_oj_total <- sqldf("select tooth_length, supplement, count(supplement) as total_supplement, sum(dose) as total_dose from team_oj group by tooth_length,supplement order by tooth_length")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
overview <- merge(team_oj_total, team_vc_total)
overview <- cbind(team_oj_total, team_vc_total)
overview <- merge(team_oj_total, team_vc_total, by = "tooth_length")
overview <- rbind(team_oj_total, team_vc_total)
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
stat.desc(overview)
stat.desc(team_oj)
stat.desc(team_oj) stat.desc(team_vc)
t.test(len ~ supplement, data = overview)
t.test(tooth_length ~ supplement, data = overview)
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
tresult <- t.test(tooth_length ~ supplement, data = overview)
tresult
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
### H0 dose has no affect on tooth growth ### HA does will affect tooth growth tresult <- t.test(tooth_length ~ dose, data = overview, var.equal = FALSE, paired = FALSE, conf.level = .95) alpha <- .05 if (tresult$p.value > alpha) {     #If the p-value is less than or equal to the chosen significance level (α),      #the test suggests that the observed data is inconsistent with the null hypothesis,      #so the null hypothesis must be rejected. However, that does not prove that the tested hypothesis is true     msg <- paste("p.value is ", tresult$p.value, " which is greater than alpha (.05) so we reject H0")     print(msg) }
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
dose_small <- overview[overview$dose >= .5 && overview$dose <= 1]
dose_small <- overview[overview$dose >= .5 && overview$dose <= 1] dose_medium <- overview[overview$dose >= 1 && overview$dose <= 1.5] dose_high <- overview[overview$dose >= 1.5 && overview$dose <= 2]
dose_medium <- overview[overview$dose >= 1.0 && overview$dose <= 1.5]
dose_high <- overview[overview$dose >= 1.5 && overview$dose <= 2.0]
overview$dose <- as.factor(overview$dose)
dose_medium <- overview[overview$dose >= 1 && overview$dose <= 1.5]
dose_high <- overview[overview$dose >= 1.5 && overview$dose <= 2]
overview$dose <- as.numeric(overview$dose)
dose_medium <- overview[overview$dose >= 1 && overview$dose <= 1.5]
#1. need to break up the dose into 3 groups dose_small <- overview[overview$dose >= .5 && overview$dose <= 1] dose_medium <- overview[overview$dose >= 1 && overview$dose <= 1.5] dose_high <- overview[overview$dose >= 1.5 && overview$dose <= 2]
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
dose_small <- overview[overview$dose >= .5 && overview$dose < 1]
dose_medium <- overview[overview$dose >= 1 && overview$dose < 1.5]
options(digits = 2)
overview$dose <- as.numeric(overview$dose)
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
dose_small <- subset(overview, $dose >= .5 && dose <= 1.0)
dose_small <- subset(overview, dose >= .5 && dose <= 1.0)
dose_small <- subset(overview, dose >= .5 & dose <= 1.0)
dose_medium <- overview[overview$dose >= 1.0 & overview$dose <= 1.5]
dose_medium <- subset(overview, dose >= 1.0 & dose <= 1.5)
dose_high <- subset(overview, dose >= 1.5 & dose <= 2.0)
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
dose_small <- subset(overview, dose >= 0.5 & dose <= 1.0)
tresult_dose_small <- t.test(tooth_length ~ dose_small, data = overview, var.equal = FALSE, paired = FALSE, conf.level = .95)
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
dose_small <- subset(overview, dose == .05) dose_medium <- subset(overview, dose == 1.0) dose_high <- subset(overview, dose == 2.0)
dose_small <- subset(overview, dose == 0.5)
### small dose ### H0 small dose between .05 and 1 mg has no affect on tooth growth ### HA small dose between .05 and 1 mg will affect tooth growth tresult_dose_small <- t.test(tooth_length ~ supplement, data = dose_small, var.equal = FALSE, paired = FALSE, conf.level = .95) test_reject("H0 small dose between .05 and 1 mg has no affect on tooth growth", tresult_dose_small) tresult_dose_small$conf.int[1:2]
### small dose ### H0 small dose between .05 and 1 mg has no affect on tooth growth ### HA small dose between .05 and 1 mg will affect tooth growth tresult_dose_small <- t.test(tooth_length ~ dose, data = dose_small, var.equal = FALSE, paired = FALSE, conf.level = .95) test_reject("H0 small dose between .05 and 1 mg has no affect on tooth growth", tresult_dose_small) tresult_dose_small$conf.int[1:2]
tresult_dose_small <- t.test(tooth_length ~ supplement, data = dose_small, var.equal = FALSE, paired = FALSE, conf.level = .95) test_reject("H0 small dose between .05 and 1 mg has no affect on tooth growth", tresult_dose_small) tresult_dose_small$conf.int[1:2]
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
# Supplements ### H0 supplements have no affect on tooth growth ### HA supplements will affect tooth growth tresult_supplement <- t.test(tooth_length ~ supplement, data = overview, var.equal = FALSE, paired = FALSE, conf.level = .95) test_reject("H0 supplements have no affect on tooth growth", tresult_supplement)
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source('C:/dev/r-course/5-statistical-inference/assignment_2.R', echo=TRUE)
update.packages()
y
y
update.packages("knitr")
update.packages("markdown")
markdown
update.packages("rmarkdown")
unlink('5-statistical-inference/assignment_2_cache', recursive = TRUE)
source('C:/dev/r-course/6-logistic-regression/assignment.R', echo=TRUE)
unlink('C:/dev/r-course/5-statistical-inference/assignment_1_cache', recursive = TRUE)
update.packages("rmarkdown")
source('C:/dev/r-course/6-logistic-regression/assignment.R', echo=TRUE)
options(repos = c(CRAN = "http://cran.rstudio.com"))
source('C:/dev/r-course/6-logistic-regression/assignment.R', echo=TRUE)
data(mtcars)
data <- sqldf('select mpg, cyl as cylinders_number, disp as displacement_inches, hp as horsepower, drat as rear_axle_ratio, wt as weight_pounds, qsec as quarter_mile_time, vs as engine_type, am as transmission_type, gear as gears_number, carb as carburetors_number from mtcars')
data <- as_tibble(data)
data$engine_type <- factor(data$engine_type, levels = c(0, 1), labels = c('v_engine', 'straight_engine'))
data$transmission_type <- factor(data$transmission_type, levels = c(0, 1), labels = c('Automatic', 'Manual'))
data$cylinders_number <- factor(data$cylinders_number)
data$carburetors_number <- factor(data$carburetors_number)
suppressMessages(rm(list = ls()))
suppressMessages(setwd("C:/dev/r-course/6-logistic-regression"))
list.of.packages <- c("tidyverse", "knitr", "markdown", "moments", "data.table", "sqldf", "car")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
if (length(new.packages)) install.packages(new.packages, dependencies = TRUE)
sapply(sapply(list.of.packages, library, character.only = TRUE, quietly = TRUE), require, character.only = TRUE, quietly = TRUE)
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
workstreams <- unique(csv$WorkStream)
data <- data.frame(   id = 1:4,   content = c("Item one", "Item two",  "Ranged item", "Item four"),   start = c("2016-01-10", "2016-01-11", "2016-01-20", "2016-02-14 15:00:00"),   end = c(NA, NA, "2016-02-04", NA) ) timevis(data)
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
data <- sqldf("select * from csv")
data <- sqldf("select WorkStream, sum(TotalPoints) from csv group by WorkStream")
data <- sqldf("select WorkStream, sum(Points) as SummedPoints from csv group by WorkStream")
data$WorkStream
data <- sqldf("select WorkStream, sum(Points) as SummedPoints,StartDate=GetDate(), EndDate=GetDate() from csv group by WorkStream")
data$StartDate <- Sys.Date()
data <- sqldf("select WorkStream, sum(Points) as SummedPoints from csv group by WorkStream where WorkStream <> 'BAU' and WorkStream <>'Bug'")
data <- sqldf("select WorkStream, sum(Points) as SummedPoints from csv where WorkStream <> 'BAU' and WorkStream <>'Bug' group by WorkStream ")
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
library(AppliedPredictiveModeling)
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
install.packages("AppliedPredictiveModeling")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
trainIndex = createDataPartition(diagnosis, p = 0.5, list = FALSE)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
trainIndex = createDataPartition(diagnosis, p = 0.5, list = FALSE)
library(caret)
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
names <- colnames(concrete) names <- names[-length(names)]
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +    theme_bw()
cutCS <- cut2(training$CompressiveStrength, g = 4)
install.packages("Hmisc")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
qplot(index, CompressiveStrength, data = training, color = cut2(training$Cement, g = breaks))
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
install.packages("e1071", lib="C:/Users/chrismckelt/Documents/R/win-library/3.4")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
non_pca_result
?preProcess
pca_model <- train(new_training$diagnosis ~ ., data = pc_training_preds, method = "glm")
pc_training_preds <- predict(pc_training_obj, new_training[, -13])
pc_testing_preds <- predict(pc_training_obj, new_testing[, -13])
pca_model <- train(new_training$diagnosis ~ ., data = pc_training_preds, method = "glm")
install.packages("pgmm", lib="C:/Users/chrismckelt/Documents/R/win-library/3.4")
install.packages("ElemStatLearn", lib="C:/Users/chrismckelt/Documents/R/win-library/3.4")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
install.packages("installr")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
require(rattle)
install.packages("rattle")
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
using("randomForest")
install_standard_packages()
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
install.packages("randomForest", lib="C:/Users/chrismckelt/Documents/R/win-library/3.4")
using("sqldf")
using("readr")
using("doParallel")
using("caret")
using("pROC")
using("ROCR")
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
roc.perf = performance(prediction.rf, measure = "tpr", x.measure = "fpr")
roc.perf = performance(cf, measure = "tpr", x.measure = "fpr")
plot(roc(testing$classe, prediction.rf))
plot(roc(training$classe, prediction.rf))
roc.perf = performance(prediction.rf, measure = "tpr", x.measure = "fpr")
roc.perf = performance(prediction.rf, measure = "classe", x.measure = "classe")
roc.perf = performance(prediction.rf, measure = "A", x.measure = "A")
cf
help(ROCR)
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
good <- prediction.rf[, "A"]
good <- which(prediction.rf["A"])
good <- (prediction.rf["A"])
auc(prediction.rf, good)
auc(prediction.rf, good, multiclass.roc=TRUE)
prediction.rf <- predict(model.rf, training, probability = TRUE)
cf <- confusionMatrix(prediction.rf, training$classe)
good <- (prediction.rf["A"])
auc(prediction.rf, good, multiclass.roc=TRUE)
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
prediction.rf <- predict(model.rf, training, probability = TRUE)
prediction.rf.testing <- predict(model.rf, prediction.rf.testing, probability = TRUE)
prediction.rf.testing <- predict(model.rf, testing, probability = TRUE)
confusion_matrix.trainning <- confusionMatrix(prediction.rf, training$classe)
confusion_matrix.trainning
confusion_matrix.training <- confusionMatrix(prediction.rf, training$classe)
confusion_matrix.testing <- confusionMatrix(prediction.rf, testing$classe)
confusion_matrix <- confusionMatrix(prediction.rf, training$classe)
confusion_matrix <- confusionMatrix(prediction.rf, training$classe)
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
training$success <= sqldf("select case classe when 'A' then 1 else 0 from training")
training <- training[, colSums(is.na(training)) == 0]
success <= sqldf("select case when classe = 'A' then 1 else 0 from training")
training$success <= sqldf("select case when classe = 'A' then 1 else 0 from training")
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
success <= sqldf("select case when classe = 'A' then 1 else 0 from training")
training$success <- sqldf("select case when classe = 'A' then 1 else 0 from training")
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
training$success <- sqldf("select case when classe = 'A' then 1 else 0 from training")
training$success <- sqldf("select case classe when 'A' then 1 else 0 from training")
class(training)
names(training)
names(training)
training$success <- sqldf("select case classe when 'A' then '1' else '0' from training")
training$success <- sqldf("select classe from training")
training$success <- sqldf("select case when classe = 'A' then 1 else 0 from training")
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
training$success
#testing <- testing[, order(names(testing))] dim(training) dim(testing) ## “classe” variable is the one we are trying to predict levels(training$classe) names(training) training$classe = as.factor(training$classe) training$success <- sqldf("select case when classe = 'A' then 1 else 0 from training")
training$success <- sqldf("select case when classe = 'A' then 1 else 0 end from training")
training$success <- as.numeric(training$success)
training$success
training$success
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
training$success
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
suppressMessages(rm(list = ls()))
suppressMessages(setwd("C:/dev/r-course/8-machine-learning"))
using <- function(packageName) {
if (!require(packageName, character.only = TRUE) && !(packageName %in%  installed.packages())) {
install.packages(dput(packageName), dependencies = TRUE, quiet = FALSE)
}
library(packageName, character.only = TRUE)
}
using("caret")
using("sqldf")
using("readr")
using("randomForest")
using("ROCR")
using("pROC")
using("parallel")
using("doParallel")
using("dplyr")
using("ggplot2")
set.seed(333)
source('C:/dev/r-course/8-machine-learning/assignment.R', echo=TRUE)
source('C:/dev/r-course/8-machine-learning/assignment.R', echo=TRUE)
confusion_matrix.gbm
confusion_matrix.rf
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
