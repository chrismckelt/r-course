overview <- merge(team_oj_total, team_vc_total, by = "tooth_length")
overview <- rbind(team_oj_total, team_vc_total)
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
stat.desc(overview)
stat.desc(team_oj)
stat.desc(team_oj) stat.desc(team_vc)
t.test(len ~ supplement, data = overview)
t.test(tooth_length ~ supplement, data = overview)
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
tresult <- t.test(tooth_length ~ supplement, data = overview)
tresult
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
### H0 dose has no affect on tooth growth ### HA does will affect tooth growth tresult <- t.test(tooth_length ~ dose, data = overview, var.equal = FALSE, paired = FALSE, conf.level = .95) alpha <- .05 if (tresult$p.value > alpha) {     #If the p-value is less than or equal to the chosen significance level (α),      #the test suggests that the observed data is inconsistent with the null hypothesis,      #so the null hypothesis must be rejected. However, that does not prove that the tested hypothesis is true     msg <- paste("p.value is ", tresult$p.value, " which is greater than alpha (.05) so we reject H0")     print(msg) }
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
dose_small <- overview[overview$dose >= .5 && overview$dose <= 1]
dose_small <- overview[overview$dose >= .5 && overview$dose <= 1] dose_medium <- overview[overview$dose >= 1 && overview$dose <= 1.5] dose_high <- overview[overview$dose >= 1.5 && overview$dose <= 2]
dose_medium <- overview[overview$dose >= 1.0 && overview$dose <= 1.5]
dose_high <- overview[overview$dose >= 1.5 && overview$dose <= 2.0]
overview$dose <- as.factor(overview$dose)
dose_medium <- overview[overview$dose >= 1 && overview$dose <= 1.5]
dose_high <- overview[overview$dose >= 1.5 && overview$dose <= 2]
overview$dose <- as.numeric(overview$dose)
dose_medium <- overview[overview$dose >= 1 && overview$dose <= 1.5]
#1. need to break up the dose into 3 groups dose_small <- overview[overview$dose >= .5 && overview$dose <= 1] dose_medium <- overview[overview$dose >= 1 && overview$dose <= 1.5] dose_high <- overview[overview$dose >= 1.5 && overview$dose <= 2]
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
dose_small <- overview[overview$dose >= .5 && overview$dose < 1]
dose_medium <- overview[overview$dose >= 1 && overview$dose < 1.5]
options(digits = 2)
overview$dose <- as.numeric(overview$dose)
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
dose_small <- subset(overview, $dose >= .5 && dose <= 1.0)
dose_small <- subset(overview, dose >= .5 && dose <= 1.0)
dose_small <- subset(overview, dose >= .5 & dose <= 1.0)
dose_medium <- overview[overview$dose >= 1.0 & overview$dose <= 1.5]
dose_medium <- subset(overview, dose >= 1.0 & dose <= 1.5)
dose_high <- subset(overview, dose >= 1.5 & dose <= 2.0)
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
dose_small <- subset(overview, dose >= 0.5 & dose <= 1.0)
tresult_dose_small <- t.test(tooth_length ~ dose_small, data = overview, var.equal = FALSE, paired = FALSE, conf.level = .95)
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
dose_small <- subset(overview, dose == .05) dose_medium <- subset(overview, dose == 1.0) dose_high <- subset(overview, dose == 2.0)
dose_small <- subset(overview, dose == 0.5)
### small dose ### H0 small dose between .05 and 1 mg has no affect on tooth growth ### HA small dose between .05 and 1 mg will affect tooth growth tresult_dose_small <- t.test(tooth_length ~ supplement, data = dose_small, var.equal = FALSE, paired = FALSE, conf.level = .95) test_reject("H0 small dose between .05 and 1 mg has no affect on tooth growth", tresult_dose_small) tresult_dose_small$conf.int[1:2]
### small dose ### H0 small dose between .05 and 1 mg has no affect on tooth growth ### HA small dose between .05 and 1 mg will affect tooth growth tresult_dose_small <- t.test(tooth_length ~ dose, data = dose_small, var.equal = FALSE, paired = FALSE, conf.level = .95) test_reject("H0 small dose between .05 and 1 mg has no affect on tooth growth", tresult_dose_small) tresult_dose_small$conf.int[1:2]
tresult_dose_small <- t.test(tooth_length ~ supplement, data = dose_small, var.equal = FALSE, paired = FALSE, conf.level = .95) test_reject("H0 small dose between .05 and 1 mg has no affect on tooth growth", tresult_dose_small) tresult_dose_small$conf.int[1:2]
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
# Supplements ### H0 supplements have no affect on tooth growth ### HA supplements will affect tooth growth tresult_supplement <- t.test(tooth_length ~ supplement, data = overview, var.equal = FALSE, paired = FALSE, conf.level = .95) test_reject("H0 supplements have no affect on tooth growth", tresult_supplement)
source("C:/dev/r-course/5-statistical-inference/assignment_2.R", echo = TRUE, encoding = "Windows-1252")
source('C:/dev/r-course/5-statistical-inference/assignment_2.R', echo=TRUE)
update.packages()
y
y
update.packages("knitr")
update.packages("markdown")
markdown
update.packages("rmarkdown")
unlink('5-statistical-inference/assignment_2_cache', recursive = TRUE)
source('C:/dev/r-course/6-logistic-regression/assignment.R', echo=TRUE)
unlink('C:/dev/r-course/5-statistical-inference/assignment_1_cache', recursive = TRUE)
update.packages("rmarkdown")
source('C:/dev/r-course/6-logistic-regression/assignment.R', echo=TRUE)
options(repos = c(CRAN = "http://cran.rstudio.com"))
source('C:/dev/r-course/6-logistic-regression/assignment.R', echo=TRUE)
data(mtcars)
data <- sqldf('select mpg, cyl as cylinders_number, disp as displacement_inches, hp as horsepower, drat as rear_axle_ratio, wt as weight_pounds, qsec as quarter_mile_time, vs as engine_type, am as transmission_type, gear as gears_number, carb as carburetors_number from mtcars')
data <- as_tibble(data)
data$engine_type <- factor(data$engine_type, levels = c(0, 1), labels = c('v_engine', 'straight_engine'))
data$transmission_type <- factor(data$transmission_type, levels = c(0, 1), labels = c('Automatic', 'Manual'))
data$cylinders_number <- factor(data$cylinders_number)
data$carburetors_number <- factor(data$carburetors_number)
suppressMessages(rm(list = ls()))
suppressMessages(setwd("C:/dev/r-course/6-logistic-regression"))
list.of.packages <- c("tidyverse", "knitr", "markdown", "moments", "data.table", "sqldf", "car")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
if (length(new.packages)) install.packages(new.packages, dependencies = TRUE)
sapply(sapply(list.of.packages, library, character.only = TRUE, quietly = TRUE), require, character.only = TRUE, quietly = TRUE)
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
workstreams <- unique(csv$WorkStream)
data <- data.frame(   id = 1:4,   content = c("Item one", "Item two",  "Ranged item", "Item four"),   start = c("2016-01-10", "2016-01-11", "2016-01-20", "2016-02-14 15:00:00"),   end = c(NA, NA, "2016-02-04", NA) ) timevis(data)
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
data <- sqldf("select * from csv")
data <- sqldf("select WorkStream, sum(TotalPoints) from csv group by WorkStream")
data <- sqldf("select WorkStream, sum(Points) as SummedPoints from csv group by WorkStream")
data$WorkStream
data <- sqldf("select WorkStream, sum(Points) as SummedPoints,StartDate=GetDate(), EndDate=GetDate() from csv group by WorkStream")
data$StartDate <- Sys.Date()
data <- sqldf("select WorkStream, sum(Points) as SummedPoints from csv group by WorkStream where WorkStream <> 'BAU' and WorkStream <>'Bug'")
data <- sqldf("select WorkStream, sum(Points) as SummedPoints from csv where WorkStream <> 'BAU' and WorkStream <>'Bug' group by WorkStream ")
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
library(AppliedPredictiveModeling)
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
install.packages("AppliedPredictiveModeling")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
trainIndex = createDataPartition(diagnosis, p = 0.5, list = FALSE)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
trainIndex = createDataPartition(diagnosis, p = 0.5, list = FALSE)
library(caret)
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
names <- colnames(concrete) names <- names[-length(names)]
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +    theme_bw()
cutCS <- cut2(training$CompressiveStrength, g = 4)
install.packages("Hmisc")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
qplot(index, CompressiveStrength, data = training, color = cut2(training$Cement, g = breaks))
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
install.packages("e1071", lib="C:/Users/chrismckelt/Documents/R/win-library/3.4")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
non_pca_result
?preProcess
pca_model <- train(new_training$diagnosis ~ ., data = pc_training_preds, method = "glm")
pc_training_preds <- predict(pc_training_obj, new_training[, -13])
pc_testing_preds <- predict(pc_training_obj, new_testing[, -13])
pca_model <- train(new_training$diagnosis ~ ., data = pc_training_preds, method = "glm")
install.packages("pgmm", lib="C:/Users/chrismckelt/Documents/R/win-library/3.4")
install.packages("ElemStatLearn", lib="C:/Users/chrismckelt/Documents/R/win-library/3.4")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
install.packages("installr")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
require(rattle)
install.packages("rattle")
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
using("randomForest")
install_standard_packages()
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
install.packages("randomForest", lib="C:/Users/chrismckelt/Documents/R/win-library/3.4")
using("sqldf")
using("readr")
using("doParallel")
using("caret")
using("pROC")
using("ROCR")
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
roc.perf = performance(prediction.rf, measure = "tpr", x.measure = "fpr")
roc.perf = performance(cf, measure = "tpr", x.measure = "fpr")
plot(roc(testing$classe, prediction.rf))
plot(roc(training$classe, prediction.rf))
roc.perf = performance(prediction.rf, measure = "tpr", x.measure = "fpr")
roc.perf = performance(prediction.rf, measure = "classe", x.measure = "classe")
roc.perf = performance(prediction.rf, measure = "A", x.measure = "A")
cf
help(ROCR)
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
good <- prediction.rf[, "A"]
good <- which(prediction.rf["A"])
good <- (prediction.rf["A"])
auc(prediction.rf, good)
auc(prediction.rf, good, multiclass.roc=TRUE)
prediction.rf <- predict(model.rf, training, probability = TRUE)
cf <- confusionMatrix(prediction.rf, training$classe)
good <- (prediction.rf["A"])
auc(prediction.rf, good, multiclass.roc=TRUE)
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
prediction.rf <- predict(model.rf, training, probability = TRUE)
prediction.rf.testing <- predict(model.rf, prediction.rf.testing, probability = TRUE)
prediction.rf.testing <- predict(model.rf, testing, probability = TRUE)
confusion_matrix.trainning <- confusionMatrix(prediction.rf, training$classe)
confusion_matrix.trainning
confusion_matrix.training <- confusionMatrix(prediction.rf, training$classe)
confusion_matrix.testing <- confusionMatrix(prediction.rf, testing$classe)
confusion_matrix <- confusionMatrix(prediction.rf, training$classe)
confusion_matrix <- confusionMatrix(prediction.rf, training$classe)
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
training$success <= sqldf("select case classe when 'A' then 1 else 0 from training")
training <- training[, colSums(is.na(training)) == 0]
success <= sqldf("select case when classe = 'A' then 1 else 0 from training")
training$success <= sqldf("select case when classe = 'A' then 1 else 0 from training")
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
success <= sqldf("select case when classe = 'A' then 1 else 0 from training")
training$success <- sqldf("select case when classe = 'A' then 1 else 0 from training")
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
training$success <- sqldf("select case when classe = 'A' then 1 else 0 from training")
training$success <- sqldf("select case classe when 'A' then 1 else 0 from training")
class(training)
names(training)
names(training)
training$success <- sqldf("select case classe when 'A' then '1' else '0' from training")
training$success <- sqldf("select classe from training")
training$success <- sqldf("select case when classe = 'A' then 1 else 0 from training")
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
training$success
#testing <- testing[, order(names(testing))] dim(training) dim(testing) ## “classe” variable is the one we are trying to predict levels(training$classe) names(training) training$classe = as.factor(training$classe) training$success <- sqldf("select case when classe = 'A' then 1 else 0 from training")
training$success <- sqldf("select case when classe = 'A' then 1 else 0 end from training")
training$success <- as.numeric(training$success)
training$success
training$success
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
training$success
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/me/dev-timeline.R", echo = TRUE, encoding = "Windows-1252")
suppressMessages(rm(list = ls()))
suppressMessages(setwd("C:/dev/r-course/8-machine-learning"))
using <- function(packageName) {
if (!require(packageName, character.only = TRUE) && !(packageName %in%  installed.packages())) {
install.packages(dput(packageName), dependencies = TRUE, quiet = FALSE)
}
library(packageName, character.only = TRUE)
}
using("caret")
using("sqldf")
using("readr")
using("randomForest")
using("ROCR")
using("pROC")
using("parallel")
using("doParallel")
using("dplyr")
using("ggplot2")
set.seed(333)
source('C:/dev/r-course/8-machine-learning/assignment.R', echo=TRUE)
source('C:/dev/r-course/8-machine-learning/assignment.R', echo=TRUE)
confusion_matrix.gbm
confusion_matrix.rf
source("C:/dev/r-course/8-machine-learning/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/assignment.R", echo = TRUE, encoding = "Windows-1252")
install.packages("Leaflet")
source("C:/dev/r-course/9-data-products/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/assignment.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/assignment.R", echo = TRUE, encoding = "Windows-1252")
C:\dev\r-course\9-data-products\week-3\assignment-2.R
install.packages("revealjs", type = "source")
rmarkdown::render('assignment-2.Rmd')
rmarkdown::render('C:/dev/r-course/9-data-products/week-3/assignment-2.Rmd')
source('C:/dev/r-course/9-data-products/week-3/assignment-2.R', echo=TRUE)
install.packages("ggplot2", dependencies = TRUE)
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
pred <- prediction(ROCR.simple$predictions, ROCR.simple$labels)
class(pred)
slotNames(pred)
sn = slotNames(pred)
sapply(sn, function(x) length(slot(pred, x)))
sapply(sn, function(x) class(slot(pred, x)))
data(ROCR.hiv)
manypred = prediction(ROCR.hiv$hiv.nn$predictions, ROCR.hiv$hiv.nn$labels)
sapply(sn, function(x) length(slot(manypred, x)))
performance(prediction.obj, measure, x.measure = "cutoff", ...)
roc.perf = performance(pred, measure = "tpr", x.measure = "fpr")
plot(roc.perf)
abline(a = 0, b = 1)
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/scratchpad.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-3/assignment-2.R", echo = TRUE, encoding = "Windows-1252")
rmarkdown::render('C:/dev/r-course/9-data-products/week-3/assignment-2.Rmd')
install.packages("revealjs", dependencies = TRUE)
rmarkdown::render('C:/dev/r-course/9-data-products/week-3/assignment-2.Rmd')
rmarkdown::render('C:/dev/r-course/9-data-products/week-3/assignment-2.Rmd')
install.packages("pacman", dependencies = TRUE)
library(pacman)
packs <- c("XML", "devtools", "RCurl", "fakePackage", "SPSSemulate") success <- suppressWarnings(sapply(packs, require, character.only = TRUE)) install.packages(names(success)[!success]) sapply(names(success)[!success], require, character.only = TRUE)
source("C:/dev/r-course/9-data-products/week-4/index.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/index.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/include.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/index.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/index.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/index.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/include.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/index.R", echo = TRUE, encoding = "Windows-1252")
n
n
n
source("C:/dev/r-course/9-data-products/week-4/index.R", echo = TRUE, encoding = "Windows-1252")
packageVersion()
source("C:/dev/r-course/9-data-products/week-4/index.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/index.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/include.r", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/index.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/index.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/index.R", echo = TRUE, encoding = "Windows-1252")
box_status <- ggplot(loanbook, aes(loan_status, loan_amnt)) box_status + geom_boxplot(aes(fill = loan_status)) +   theme(axis.text.x = element_blank()) +   labs(list(     title = "Loan amount by status",     x = "Status",     y = "Amount"))
p_load("shiny")
Desc(loanbook$loan_amnt, main = "Loan amount distribution", plotit = TRUE)
source("C:/dev/r-course/9-data-products/week-4/data_processing.R", echo = TRUE, encoding = "Windows-1252")
install.packages("rCharts", dependencies = TRUE)
install.packages("base64enc", dependencies = TRUE)
install.packages("rMaps", dependencies = TRUE)
source("C:/dev/r-course/9-data-products/week-4/data_processing.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/data_processing.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/data_processing.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/data_processing.R", echo = TRUE, encoding = "Windows-1252")
datatable(loanbook$loan_amnt)
data <- sqldf("select loan_amnt,issue_d from loanbook")
datatable(data)
data <- sqldf("select sum(loan_amnt) as total_loan_amount,issue_d from loanbook group by issue_d")
source("C:/dev/r-course/9-data-products/week-4/data_processing.R", echo = TRUE, encoding = "Windows-1252")
data.loan_amounts_by_month <- sqldf("select sum(loan_amnt) as total_loan_amount,issue_d from [data.loanbook] group by issue_d") x1 <- xPlot(value ~ year, group = "category", data = data.loan_amounts_by_month, type = "line-dotted")
source("C:/dev/r-course/9-data-products/week-4/data_processing.R", echo = TRUE, encoding = "Windows-1252")
data.loan_amounts_by_month <- sqldf("select sum(loan_amnt) as total_loan_amount,issue_d from [data.loanbook] group by issue_d")
p_load("xplot")
p_load("astrochron")
p_load("x.ent")
source("C:/dev/r-course/9-data-products/week-4/data_processing.R", echo = TRUE, encoding = "Windows-1252")
n1 <- nPlot(loan_amnt ~ loan_status, group = "loan_status", data = data.loanbook, type = "multiBarChart")
require(rCharts)
n1 <- nPlot(loan_amnt ~ loan_status, group = "loan_status", data = data.loanbook, type = "multiBarChart")
n1 <- nPlot(loan_amnt ~ loan_status, group = "loan_status", data = data.loanbook, type = "multiBarChart") n1$print("chart3")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/data_processing.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/data_processing.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/data_processing.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
using("base64enc")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
library(shiny) runApp()
library(shiny) runApp()
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
main_body <- lapply(list(...), function(x) tagList(fluidRow(x), br()))
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
ui <- htmlTemplate("template.html",             #headerBoilerPlate = headerBoilerPlate(title_tag),             #sideBarBoilerPlate = sideBarBoilerPlate(site_title = site_title, menuItems = menuItems),             #navbarBoilerPlate = navbarBoilerPlate(),             footerBoilerPlate = footerBoilerPlate()            )
p_load("shiny")
shinyApp(ui = ui, server = server)
ui <- htmlTemplate("template.html",             #headerBoilerPlate = headerBoilerPlate(title_tag),             #sideBarBoilerPlate = sideBarBoilerPlate(site_title = site_title, menuItems = menuItems),             #navbarBoilerPlate = navbarBoilerPlate(),             footerBoilerPlate = footerBoilerPlate()            )
shinyApp(ui = ui, server = server)
library(shiny) runApp()
source("C:/dev/r-course/9-data-products/week-4/index.R", echo = TRUE, encoding = "Windows-1252")
library(shiny) runApp()
source("C:/dev/r-course/9-data-products/week-4/server.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
library(shiny) runApp()
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/index.R", echo = TRUE, encoding = "Windows-1252")
data.loan_amount_by_year <- sqldf("select sum(loan_amnt) as total_loan_amount,strftime('%d',issue_d) as LoanYear from [loanbook] group by issue_d")
data.loan_amount_by_year <- sqldf("select sum(loan_amnt) as total_loan_amount,strftime('%d',issue_d) as LoanYear from [loanbook] group by strftime('%d',issue_d)")
data.loan_amount_by_year <- sqldf("select sum(loan_amnt) as total_loan_amount, grade from [loanbook] group by grade")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
loanbook$issue_d <- mday(loanbook$issue_d)
loanbook$issue_d
loanbook$issue_d <- year(loanbook$issue_d)
loanbook$issue_month <- strsplit(loanbook$issue_d, "-")[1]
loanbook$issue_month
loanbook$issue_d <- as.Date(gsub("^", "01-", loanbook$issue_d), format = "%d-%b-%Y") # clean issue date
loanbook$issue_d
loanbook$issue_d <- dmy(gsub("^", "01-", loanbook$issue_d), format = "%d-%b-%Y") # clean issue date
loanbook$issue_d
data.loan_amount_by_month_year <- sqldf("select sum(loan_amnt) as total_loan_amount, issue_d from [loanbook] group by issue_d")
source("C:/dev/r-course/9-data-products/week-4/index.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/index.R", echo = TRUE, encoding = "Windows-1252")
library(shiny) runApp()
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
library(shiny) runApp()
library(shiny) runApp()
source("C:/dev/r-course/9-data-products/week-4/index.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/index.R", echo = TRUE, encoding = "Windows-1252")
library(shiny) runApp()
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
dataDictionary <- sqldf("select * from dataDictionary where LoanStatNew != 'NA'")
source("C:/dev/r-course/9-data-products/week-4/index.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
loanbook <- read_csv("./data/loan.csv",n_max = 50)
loanbook <- read_csv("./data/loan.csv",n_max = 50)
source("C:/dev/r-course/9-data-products/week-4/index.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/index.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
plot_ly(loanbook, x = ~loan_amnt, y = ~loan_amnt)
plot_ly(loanbook, x = ~loan_amnt, y = ~status)
plot_ly(loanbook, x = ~loan_amnt, y = ~grade)
plot_ly(loanbook, x = ~grade, y = ~loan_amnt)
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/index.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
data.amount <- loanbook %>%   select(issue_d, loan_amnt) %>%   group_by(issue_d) %>%   summarise(Amount = sum(loan_amnt))
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
source("C:/dev/r-course/9-data-products/week-4/index.R", echo = TRUE, encoding = "Windows-1252")
suppressMessages(setwd("C:/dev/r-course/9-data-products/week-4"))
library(shiny) runApp()
suppressMessages(setwd("C:/dev/r-course/9-data-products/week-4"))
library(shiny) runApp()
suppressMessages(rm(list = ls())) suppressMessages(setwd("C:/dev/r-course/9-data-products/week-4")) source("c:/dev/r-course/include.r") install_standard_packages() using("base64enc") #devtools::install_github("rstudio/shiny") using("shiny") using("choroplethr") using("choroplethrMaps") using("DescTools") using("readxl") using("devtools") using("ggplot2") using("plotly")
library(shiny) runApp()
source("C:/dev/r-course/9-data-products/week-4/app.R", echo = TRUE, encoding = "Windows-1252")
library(shiny) runApp()
shiny::runApp('9-data-products/week-4')
runApp('9-data-products/week-4')
runApp('9-data-products/week-4')
shiny::runApp()
runApp()
shiny::runApp('9-data-products/week-4')
